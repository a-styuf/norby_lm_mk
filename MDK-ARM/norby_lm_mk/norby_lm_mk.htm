<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [norby_lm_mk\norby_lm_mk.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image norby_lm_mk\norby_lm_mk.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Jun 03 20:15:46 2020
<BR><P>
<H3>Maximum Stack Usage =       1088 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; fill_pl_iss_last_frame &rArr; pn_11_get_last_frame_in_128B_format &rArr; app_lvl_get_last_rx_frame
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[31]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">ADC_IRQHandler</a><BR>
 <LI><a href="#[20e]">vcp_uart_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20e]">vcp_uart_write</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[31]">ADC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[19]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[33]">CAN1_RX0_IRQHandler</a> from canv.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[34]">CAN1_RX1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[35]">CAN1_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[32]">CAN1_TX_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5d]">CAN2_RX0_IRQHandler</a> from canv.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5e]">CAN2_RX1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5f]">CAN2_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5c]">CAN2_TX_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[9]">CDC_Control_FS</a> from usbd_cdc_if.o(i.CDC_Control_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[8]">CDC_DeInit_FS</a> from usbd_cdc_if.o(i.CDC_DeInit_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[7]">CDC_Init_FS</a> from usbd_cdc_if.o(i.CDC_Init_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[a]">CDC_Receive_FS</a> from usbd_cdc_if.o(i.CDC_Receive_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[2a]">DMA1_Stream0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream4_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Stream5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[30]">DMA1_Stream6_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4e]">DMA1_Stream7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream6_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1c]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[25]">EXTI0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[47]">EXTI15_10_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[26]">EXTI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[27]">EXTI2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[28]">EXTI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[29]">EXTI4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[36]">EXTI9_5_IRQHandler</a> from stm32f4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[23]">FLASH_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4f]">FMC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6c]">FPU_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[72]">Flash_InRAM_CopyCodeAndRestart</a> from flash.o(sect_FlashProcInRam) referenced from flash.o(.text)
 <LI><a href="#[71]">Flash_InRAM_EraseSector</a> from flash.o(sect_FlashProcInRamPiece) referenced from flash.o(.text)
 <LI><a href="#[6b]">HASH_RNG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[17]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3f]">I2C1_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3e]">I2C1_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[41]">I2C2_ER_IRQHandler</a> from stm32f4xx_it.o(i.I2C2_ER_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[40]">I2C2_EV_IRQHandler</a> from stm32f4xx_it.o(i.I2C2_EV_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[66]">I2C3_ER_IRQHandler</a> from stm32f4xx_it.o(i.I2C3_ER_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[65]">I2C3_EV_IRQHandler</a> from stm32f4xx_it.o(i.I2C3_EV_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7a]">I2C_DMAAbort</a> from stm32f4xx_hal_i2c.o(i.I2C_DMAAbort) referenced from stm32f4xx_hal_i2c.o(i.I2C_ITError)
 <LI><a href="#[7a]">I2C_DMAAbort</a> from stm32f4xx_hal_i2c.o(i.I2C_DMAAbort) referenced from stm32f4xx_hal_i2c.o(i.I2C_Slave_STOPF)
 <LI><a href="#[18]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[16]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[60]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[49]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[68]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[67]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6a]">OTG_HS_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[69]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[20]">PVD_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1d]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[80]">ProcCallbackCAN_Flash</a> from lm_int_cb.o(i.ProcCallbackCAN_Flash) referenced from lm_int_cb.o(i.ProcCallbackCmds_Init)
 <LI><a href="#[7c]">ProcCallbackCmdRegs</a> from lm_int_cb.o(i.ProcCallbackCmdRegs) referenced from lm_int_cb.o(i.ProcCallbackCmds_Init)
 <LI><a href="#[7b]">ProcCallbackCmds</a> from lm_int_cb.o(i.ProcCallbackCmds) referenced from lm_int_cb.o(i.ProcCallbackCmds_Init)
 <LI><a href="#[7e]">ProcCallbackDCRInterface</a> from lm_int_cb.o(i.ProcCallbackDCRInterface) referenced from lm_int_cb.o(i.ProcCallbackCmds_Init)
 <LI><a href="#[7d]">ProcCallbackExtMems</a> from lm_int_cb.o(i.ProcCallbackExtMems) referenced from lm_int_cb.o(i.ProcCallbackCmds_Init)
 <LI><a href="#[7f]">ProcCallbackISSInterface</a> from lm_int_cb.o(i.ProcCallbackISSInterface) referenced from lm_int_cb.o(i.ProcCallbackCmds_Init)
 <LI><a href="#[24]">RCC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[48]">RTC_Alarm_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[22]">RTC_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[15]">Reset_Handler</a> from start_808.o(!!!!my_system_init_sect) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[50]">SDIO_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[42]">SPI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[43]">SPI2_IRQHandler</a> from stm32f4xx_it.o(i.SPI2_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[52]">SPI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[77]">SPI_DMAAbortOnError</a> from stm32f4xx_hal_spi.o(i.SPI_DMAAbortOnError) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler)
 <LI><a href="#[1b]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1e]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[70]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[6d]">SystemSelect</a> from system_select.o(!!!!my_system_init_sect) referenced from start_808.o(!!!!my_system_init_sect)
 <LI><a href="#[21]">TAMP_STAMP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[37]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3a]">TIM1_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[39]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[38]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3b]">TIM2_IRQHandler</a> from stm32f4xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3c]">TIM3_IRQHandler</a> from stm32f4xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3d]">TIM4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[51]">TIM5_IRQHandler</a> from stm32f4xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[55]">TIM6_DAC_IRQHandler</a> from stm32f4xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[56]">TIM7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4a]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4d]">TIM8_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4c]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4b]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[53]">UART4_IRQHandler</a> from stm32f4xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[54]">UART5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[79]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[78]">UART_DMARxOnlyAbortCallback</a> from stm32f4xx_hal_uart.o(i.UART_DMARxOnlyAbortCallback) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_AbortReceive_IT)
 <LI><a href="#[44]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[45]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[46]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[64]">USART6_IRQHandler</a> from stm32f4xx_it.o(i.USART6_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[f]">USBD_CDC_DataIn</a> from usbd_cdc.o(i.USBD_CDC_DataIn) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[10]">USBD_CDC_DataOut</a> from usbd_cdc.o(i.USBD_CDC_DataOut) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[c]">USBD_CDC_DeInit</a> from usbd_cdc.o(i.USBD_CDC_DeInit) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[e]">USBD_CDC_EP0_RxReady</a> from usbd_cdc.o(i.USBD_CDC_EP0_RxReady) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[14]">USBD_CDC_GetDeviceQualifierDescriptor</a> from usbd_cdc.o(i.USBD_CDC_GetDeviceQualifierDescriptor) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[12]">USBD_CDC_GetFSCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetFSCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[11]">USBD_CDC_GetHSCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetHSCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[13]">USBD_CDC_GetOtherSpeedCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetOtherSpeedCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[b]">USBD_CDC_Init</a> from usbd_cdc.o(i.USBD_CDC_Init) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[d]">USBD_CDC_Setup</a> from usbd_cdc.o(i.USBD_CDC_Setup) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[5]">USBD_FS_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[0]">USBD_FS_DeviceDescriptor</a> from usbd_desc.o(i.USBD_FS_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[6]">USBD_FS_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[1]">USBD_FS_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_FS_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[2]">USBD_FS_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[3]">USBD_FS_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[4]">USBD_FS_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_FS_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[1a]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1f]">WWDG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from start_808.o(!!!!my_system_init_sect)
 <LI><a href="#[6e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[74]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[75]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[73]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[82]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[81]">fputc</a> from retarget_io.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[76]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[6f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[86]">pl_pn11A_check_and_save_tmi</a> from pl_cyclogram.o(i.pl_pn11A_check_and_save_tmi) referenced 3 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[94]">pl_pn11A_fpga_mcu_on</a> from pl_cyclogram.o(i.pl_pn11A_fpga_mcu_on) referenced 2 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[8a]">pl_pn11A_fpga_on</a> from pl_cyclogram.o(i.pl_pn11A_fpga_on) referenced 3 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[8c]">pl_pn11A_interface_reset_and_sync</a> from pl_cyclogram.o(i.pl_pn11A_interface_reset_and_sync) referenced 2 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[9a]">pl_pn11A_pwr_off</a> from pl_cyclogram.o(i.pl_pn11A_pwr_off) referenced 2 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[88]">pl_pn11A_pwr_on</a> from pl_cyclogram.o(i.pl_pn11A_pwr_on) referenced 2 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[98]">pl_pn11A_read_all</a> from pl_cyclogram.o(i.pl_pn11A_read_all) referenced 2 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[90]">pl_pn11A_read_mode</a> from pl_cyclogram.o(i.pl_pn11A_read_mode) referenced 2 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[96]">pl_pn11A_read_req_all</a> from pl_cyclogram.o(i.pl_pn11A_read_req_all) referenced 2 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[8f]">pl_pn11A_read_req_mode</a> from pl_cyclogram.o(i.pl_pn11A_read_req_mode) referenced 2 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[84]">pl_pn11A_set_iku_default</a> from pl_cyclogram.o(i.pl_pn11A_set_iku_default) referenced 3 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[9d]">pl_pn11A_stop</a> from pl_cyclogram.o(i.pl_pn11A_stop) referenced from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[8e]">pl_pn11A_write_mode</a> from pl_cyclogram.o(i.pl_pn11A_write_mode) referenced from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[87]">pl_pn11B_check_and_save_tmi</a> from pl_cyclogram.o(i.pl_pn11B_check_and_save_tmi) referenced 3 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[95]">pl_pn11B_fpga_mcu_on</a> from pl_cyclogram.o(i.pl_pn11B_fpga_mcu_on) referenced 2 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[8b]">pl_pn11B_fpga_on</a> from pl_cyclogram.o(i.pl_pn11B_fpga_on) referenced 3 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[8d]">pl_pn11B_interface_reset_and_sync</a> from pl_cyclogram.o(i.pl_pn11B_interface_reset_and_sync) referenced 2 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[9b]">pl_pn11B_pwr_off</a> from pl_cyclogram.o(i.pl_pn11B_pwr_off) referenced 3 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[89]">pl_pn11B_pwr_on</a> from pl_cyclogram.o(i.pl_pn11B_pwr_on) referenced 2 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[99]">pl_pn11B_read_all</a> from pl_cyclogram.o(i.pl_pn11B_read_all) referenced 3 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[93]">pl_pn11B_read_mode</a> from pl_cyclogram.o(i.pl_pn11B_read_mode) referenced 2 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[97]">pl_pn11B_read_req_all</a> from pl_cyclogram.o(i.pl_pn11B_read_req_all) referenced 3 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[92]">pl_pn11B_read_req_mode</a> from pl_cyclogram.o(i.pl_pn11B_read_req_mode) referenced 2 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[85]">pl_pn11B_set_iku_default</a> from pl_cyclogram.o(i.pl_pn11B_set_iku_default) referenced 3 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[9e]">pl_pn11B_stop</a> from pl_cyclogram.o(i.pl_pn11B_stop) referenced from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[91]">pl_pn11B_write_mode</a> from pl_cyclogram.o(i.pl_pn11B_write_mode) referenced 2 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[aa]">pl_pn11_A_B_stop</a> from pl_cyclogram.o(i.pl_pn11_A_B_stop) referenced from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[a9]">pl_pn11_A_B_write_mode</a> from pl_cyclogram.o(i.pl_pn11_A_B_write_mode) referenced from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[a0]">pl_pn12_check_and_save_tmi</a> from pl_cyclogram.o(i.pl_pn12_check_and_save_tmi) referenced from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[a2]">pl_pn12_pwr_off</a> from pl_cyclogram.o(i.pl_pn12_pwr_off) referenced from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[a1]">pl_pn12_pwr_on</a> from pl_cyclogram.o(i.pl_pn12_pwr_on) referenced from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[9f]">pl_pn12_set_iku_default</a> from pl_cyclogram.o(i.pl_pn12_set_iku_default) referenced from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[a3]">pl_pn12_stop</a> from pl_cyclogram.o(i.pl_pn12_stop) referenced from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[a5]">pl_pn20_check_and_save_tmi</a> from pl_cyclogram.o(i.pl_pn20_check_and_save_tmi) referenced from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[a7]">pl_pn20_pwr_off</a> from pl_cyclogram.o(i.pl_pn20_pwr_off) referenced from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[a6]">pl_pn20_pwr_on</a> from pl_cyclogram.o(i.pl_pn20_pwr_on) referenced from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[a4]">pl_pn20_set_iku_default</a> from pl_cyclogram.o(i.pl_pn20_set_iku_default) referenced from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[a8]">pl_pn20_stop</a> from pl_cyclogram.o(i.pl_pn20_stop) referenced from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[9c]">result_finish</a> from pl_cyclogram.o(i.result_finish) referenced 3 times from pl_cyclogram.o(i.cyclogram_init)
 <LI><a href="#[83]">result_init</a> from pl_cyclogram.o(i.result_init) referenced 2 times from pl_cyclogram.o(i.cyclogram_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ac]"></a>CheckBlock</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, system_select.o(!!!!my_system_init_sect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackCAN_Flash
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelect
</UL>

<P><STRONG><a name="[ad]"></a>HavePrefFlashBlockNum</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, system_select.o(!!!!my_system_init_sect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HavePrefFlashBlockNum
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackCAN_Flash
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelect
</UL>

<P><STRONG><a name="[ab]"></a>HaveRunFlashBlockNum</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_select.o(!!!!my_system_init_sect))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackCAN_Flash
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelect
</UL>

<P><STRONG><a name="[6d]"></a>SystemSelect</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, system_select.o(!!!!my_system_init_sect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemSelect &rArr; CheckBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_808
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HaveRunFlashBlockNum
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HavePrefFlashBlockNum
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_808.o(!!!!my_system_init_sect)
</UL>
<P><STRONG><a name="[15]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, start_808.o(!!!!my_system_init_sect))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>start_808</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, start_808.o(!!!!my_system_init_sect))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelect
</UL>

<P><STRONG><a name="[6e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 2]<UL><LI> startup_stm32f405xx.o(.text)
<LI> start_808.o(!!!!my_system_init_sect)
</UL>
<P><STRONG><a name="[306]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[af]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ce]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[307]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[308]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[309]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[30a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[30b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2eb]"></a>__asm___4_lm_c_lm_init____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lm.o(.rev16_text))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_create_report
</UL>

<P><STRONG><a name="[25d]"></a>__asm___8_ina226_c_b36cdfcc____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ina226.o(.rev16_text))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_read_data_process
</UL>

<P><STRONG><a name="[2f9]"></a>__asm___9_tmp1075_c_e917cb1f____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tmp1075.o(.rev16_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_read_data_process
</UL>

<P><STRONG><a name="[253]"></a>__asm___20_lm_interfaces_data_c_7f0d20ee____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lm_interfaces_data.o(.rev16_text))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tmi_const_mode
</UL>

<P><STRONG><a name="[2dc]"></a>__asm___8_pn_dcr_c_02066efa____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pn_dcr.o(.rev16_text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_load_can_flight_task
</UL>

<P><STRONG><a name="[31]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>Flash_EraseSector</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Flash_EraseSector
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackCAN_Flash
</UL>

<P><STRONG><a name="[b5]"></a>Flash_Write</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackCAN_Flash
</UL>

<P><STRONG><a name="[b3]"></a>Flash_CopyFlashProcAndRun</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_CopyFlashProcAndRun
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackCAN_Flash
</UL>

<P><STRONG><a name="[b4]"></a>CallbackCAN_Flash</STRONG> (Thumb, 1042 bytes, Stack size 80 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CallbackCAN_Flash &rArr; Flash_EraseSector
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HaveRunFlashBlockNum
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HavePrefFlashBlockNum
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CopyFlashProcAndRun
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCallbackCAN_Flash
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_set_cfg
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_load_can_flight_task
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_last_status
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_last_frame
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_cfg
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_set_cfg
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_get_cfg
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_set_cfg
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_get_cfg
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_set_cfg
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_get_last_frame_in_128B_format
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_get_cfg
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interfaces_init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_wr_param
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_rd_param
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_set_cfg
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_get_cfg
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tmi_and_beacon
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pl_iss_last_frame
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pl_cyclogramm_result
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_gen_tmi
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_dcr_rx_frame
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_uart_CDC_Receive
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_row_data_write
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_get_rx_frame
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_get_last_rx_frame
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_vcp_read_process
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_vcp_packet_send
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_VCP_RX_Handler
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_write
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_read
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackCAN_Flash
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reg_rec_setup
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_create_data_frame
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_send_data
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_frame_copy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data_get
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data_check
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_send
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_rx_prcs_cb
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_set_mode
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_process_rx_frames
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_data
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CopyFlashProcAndRun
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_iss_get_app_lvl_reprot
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_dcr_rx_frame
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_interface_process
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_month_offset
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[30c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_report_create
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_cfg
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_report_create
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_get_cfg
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_report_create
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_get_cfg
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_report_create
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_get_cfg
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_format_part
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_save_parameters
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_report_create
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_get_cfg
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_gen_tmi
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_dcr_rx_frame
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_tmi_slice_create
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_tmi_slice_create
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_tmi_slice_create
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[30d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tmi_and_beacon
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pl_iss_last_frame
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_write
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_read_req
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_report_reset
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_interface_reset
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_interface_init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_parameters_default
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_report_reset
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_report_reset
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_int_init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_fill_default_flight_task
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_get_last_frame_in_128B_format
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_format_part
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_set_time_s
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_time_s
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_iss_get_app_lvl_reprot
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tmi_and_beacon
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pl_iss_last_frame
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_dcr_rx_frame
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_seq_read_start
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_read
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_read_check
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_reset
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_unix_time_s
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_process_rx_frames
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[30f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[222]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_rx_prcs_cb
</UL>

<P><STRONG><a name="[bc]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_init
</UL>

<P><STRONG><a name="[be]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_get_free_volume_in_percantage
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_read_data_process
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_rel_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_get_free_volume_in_percantage
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_check_and_save_tmi
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_check_and_save_tmi
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_check_and_save_tmi
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_check_and_save_tmi
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_get_error
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_read_data_process
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_rel_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_get_free_volume_in_percantage
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_check_and_save_tmi
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_check_and_save_tmi
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_check_and_save_tmi
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_check_and_save_tmi
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_get_error
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_read_data_process
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_rel_init
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_get_free_volume_in_percantage
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_read_data_process
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_rel_init
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_get_error
</UL>

<P><STRONG><a name="[310]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[311]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[312]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[313]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[bd]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[73]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[314]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[315]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[c2]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1f5]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b0]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[316]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[cf]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[317]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, canv.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; CAN_RX_Handler &rArr; CAN_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RX_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, canv.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; CAN_RX_Handler &rArr; CAN_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RX_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>CAN_FilterAssign</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, canv.o(i.CAN_FilterAssign))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_FilterAssign
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RegisterVar
</UL>

<P><STRONG><a name="[d1]"></a>CAN_Init</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, canv.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interfaces_init
</UL>

<P><STRONG><a name="[d0]"></a>CAN_RX_Handler</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, canv.o(i.CAN_RX_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CAN_RX_Handler &rArr; CAN_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>CAN_RegisterVar</STRONG> (Thumb, 168 bytes, Stack size 28 bytes, canv.o(i.CAN_RegisterVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CAN_RegisterVar &rArr; CAN_FilterAssign
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterAssign
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterAllVars
</UL>

<P><STRONG><a name="[d3]"></a>CAN_Tx</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, canv.o(i.CAN_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RX_Handler
</UL>

<P><STRONG><a name="[d6]"></a>CAN_VCP_RX_Handler</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, can_vcp.o(i.CAN_VCP_RX_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = CAN_VCP_RX_Handler &rArr; can_vcp_packet_send &rArr; vcp_uart_write &rArr;  vcp_uart_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_vcp_packet_send
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_vcp_error_collector
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_vcp_read_process
</UL>

<P><STRONG><a name="[2d]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; tmp_alert_it_process &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Error_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[16a]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[19f]"></a>HAL_DMA_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
</UL>

<P><STRONG><a name="[db]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[e5]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>

<P><STRONG><a name="[e6]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; tmp_alert_it_process &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_alert_it_process
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_alert_gd_it_process
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_alt_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; tmp_alert_it_process &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>HAL_GPIO_Init</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[257]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[e2]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[196]"></a>HAL_I2C_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_AbortCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[19e]"></a>HAL_I2C_AddrCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_AddrCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ADDR
</UL>

<P><STRONG><a name="[ea]"></a>HAL_I2C_ER_IRQHandler</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; pwr_cb_it_process &rArr; ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_AF
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_ER_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ER_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>HAL_I2C_EV_IRQHandler</STRONG> (Thumb, 452 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HAL_I2C_EV_IRQHandler &rArr; I2C_Slave_STOPF &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; pwr_cb_it_process &rArr; ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ADDR
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit_TXE
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit_BTF
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive_RXNE
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive_BTF
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_SB
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ADDR
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ADD10
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConvertOtherXferOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_EV_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>HAL_I2C_ErrorCallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.HAL_I2C_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_I2C_ErrorCallback &rArr; pwr_cb_it_process &rArr; ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_cb_it_process
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_cb_it_process
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[ff]"></a>HAL_I2C_Init</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[197]"></a>HAL_I2C_ListenCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_ListenCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_AF
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[102]"></a>HAL_I2C_MasterRxCpltCallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.HAL_I2C_MasterRxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_I2C_MasterRxCpltCallback &rArr; pwr_cb_it_process &rArr; ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_cb_it_process
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_cb_it_process
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
</UL>

<P><STRONG><a name="[103]"></a>HAL_I2C_MasterTxCpltCallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.HAL_I2C_MasterTxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_I2C_MasterTxCpltCallback &rArr; pwr_cb_it_process &rArr; ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_cb_it_process
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_cb_it_process
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
</UL>

<P><STRONG><a name="[104]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 748 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_init
</UL>

<P><STRONG><a name="[25e]"></a>HAL_I2C_Master_Receive_IT</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Master_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_Master_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_read_request
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_read_request
</UL>

<P><STRONG><a name="[108]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_init
</UL>

<P><STRONG><a name="[25f]"></a>HAL_I2C_Master_Transmit_IT</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Master_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_Master_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_reg_addr_set
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_reg_addr_set
</UL>

<P><STRONG><a name="[198]"></a>HAL_I2C_MemRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_MemRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
</UL>

<P><STRONG><a name="[19a]"></a>HAL_I2C_MemTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_MemTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
</UL>

<P><STRONG><a name="[100]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[19c]"></a>HAL_I2C_SlaveRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_SlaveRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive_RXNE
</UL>

<P><STRONG><a name="[19d]"></a>HAL_I2C_SlaveTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_SlaveTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_AF
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit_TXE
</UL>

<P><STRONG><a name="[110]"></a>HAL_IWDG_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[28a]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[111]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[114]"></a>HAL_MspInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2f3]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lock
</UL>

<P><STRONG><a name="[10f]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_lock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[10e]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[112]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[137]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_LPM_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[118]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ConnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ConnectCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
</UL>

<P><STRONG><a name="[11e]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[122]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[1df]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[124]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[126]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[129]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[12c]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[12d]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 1342 bytes, Stack size 48 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = HAL_PCD_IRQHandler &rArr; PCD_EP_OutXfrComplete_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetTurnaroundTime
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_ISOINIncompleteCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_ISOOUTIncompleteCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>HAL_PCD_Init</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[147]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[13f]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[138]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ResumeCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_SetAddress &rArr; USB_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[154]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
</UL>

<P><STRONG><a name="[156]"></a>HAL_PCD_Start</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[139]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[15a]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[15b]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[13d]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[101]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[15d]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[15c]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[15e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1152 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[15f]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_time_s
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_unix_time_s
</UL>

<P><STRONG><a name="[161]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_time_s
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_unix_time_s
</UL>

<P><STRONG><a name="[162]"></a>HAL_RTC_Init</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[163]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[166]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_set_time_s
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[168]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_set_time_s
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[165]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[16b]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
</UL>

<P><STRONG><a name="[169]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
</UL>

<P><STRONG><a name="[16c]"></a>HAL_SPI_Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[16d]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[16e]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_write
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_init
</UL>

<P><STRONG><a name="[170]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 554 bytes, Stack size 56 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_read
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_init
</UL>

<P><STRONG><a name="[115]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[17e]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[171]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[172]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[285]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_uart_CDC_Receive
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[303]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_uart_CDC_Receive
</UL>

<P><STRONG><a name="[174]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[17a]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; led_processor &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[17b]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[181]"></a>HAL_TIM_OnePulse_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OnePulse_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_OnePulse_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_MspInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
</UL>

<P><STRONG><a name="[182]"></a>HAL_TIM_OnePulse_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OnePulse_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Init
</UL>

<P><STRONG><a name="[17c]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[17d]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; led_processor &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_processor
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[17f]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[185]"></a>HAL_UART_AbortReceiveCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_AbortReceiveCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxOnlyAbortCallback
</UL>

<P><STRONG><a name="[184]"></a>HAL_UART_AbortReceive_IT</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_AbortReceive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_AbortReceive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_reset
</UL>

<P><STRONG><a name="[186]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_ErrorCallback &rArr; pn_dcr_uart_err_prcs_cb &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_err_prcs_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[2e5]"></a>HAL_UART_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_err_prcs_cb
</UL>

<P><STRONG><a name="[188]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; pn_dcr_uart_rx_prcs_cb &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[18e]"></a>HAL_UART_MspInit</STRONG> (Thumb, 638 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[286]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_uart_data
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_reset
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_send
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_rx_prcs_cb
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_err_prcs_cb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; pn_dcr_uart_rx_prcs_cb &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_uart_data
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_rx_prcs_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[2e7]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_uart_data
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_send
</UL>

<P><STRONG><a name="[193]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_set_timeout
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_tx_prcs_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[17]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.I2C2_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = I2C2_ER_IRQHandler &rArr; HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; pwr_cb_it_process &rArr; ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.I2C2_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = I2C2_EV_IRQHandler &rArr; HAL_I2C_EV_IRQHandler &rArr; I2C_Slave_STOPF &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; pwr_cb_it_process &rArr; ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.I2C3_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = I2C3_ER_IRQHandler &rArr; HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; pwr_cb_it_process &rArr; ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.I2C3_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = I2C3_EV_IRQHandler &rArr; HAL_I2C_EV_IRQHandler &rArr; I2C_Slave_STOPF &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; pwr_cb_it_process &rArr; ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2f4]"></a>ITM_SendChar</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, retarget_io.o(i.ITM_SendChar))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stderr_putchar
</UL>

<P><STRONG><a name="[1a1]"></a>MX_DMA_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a2]"></a>MX_GPIO_Init</STRONG> (Thumb, 566 bytes, Stack size 32 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a4]"></a>MX_I2C2_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_I2C2_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>MX_I2C3_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_I2C3_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a6]"></a>MX_IWDG_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iwdg.o(i.MX_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_IWDG_Init &rArr; Error_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>MX_RTC_Init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a8]"></a>MX_SPI2_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, spi.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a9]"></a>MX_TIM2_Init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ab]"></a>MX_TIM3_Init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ac]"></a>MX_TIM5_Init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, tim.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ad]"></a>MX_TIM6_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tim.o(i.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ae]"></a>MX_UART4_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1af]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b1]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b2]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b3]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_device.o(i.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_RegisterInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; PCD_EP_OutXfrComplete_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>ProcCallbackCAN_Flash</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, lm_int_cb.o(i.ProcCallbackCAN_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ProcCallbackCAN_Flash &rArr; CallbackCAN_Flash &rArr; Flash_EraseSector
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackCAN_Flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lm_int_cb.o(i.ProcCallbackCmds_Init)
</UL>
<P><STRONG><a name="[7c]"></a>ProcCallbackCmdRegs</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, lm_int_cb.o(i.ProcCallbackCmdRegs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ProcCallbackCmdRegs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdreg_process_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lm_int_cb.o(i.ProcCallbackCmds_Init)
</UL>
<P><STRONG><a name="[7b]"></a>ProcCallbackCmds</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, lm_int_cb.o(i.ProcCallbackCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ProcCallbackCmds &rArr; cmd_process_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lm_int_cb.o(i.ProcCallbackCmds_Init)
</UL>
<P><STRONG><a name="[1bb]"></a>ProcCallbackCmds_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lm_int_cb.o(i.ProcCallbackCmds_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ProcCallbackCmds_Init &rArr; interface_cb_registration
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_cb_registration
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>ProcCallbackDCRInterface</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, lm_int_cb.o(i.ProcCallbackDCRInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ProcCallbackDCRInterface
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcr_inerface_process_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lm_int_cb.o(i.ProcCallbackCmds_Init)
</UL>
<P><STRONG><a name="[7d]"></a>ProcCallbackExtMems</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, lm_int_cb.o(i.ProcCallbackExtMems))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ProcCallbackExtMems &rArr; ext_mem_read_from_part_8b &rArr; ext_mem_rd_data_frame_8b_block &rArr; ext_mem_any_read_8b_block &rArr; cy15_read &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_read_from_part_8b
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lm_int_cb.o(i.ProcCallbackCmds_Init)
</UL>
<P><STRONG><a name="[7f]"></a>ProcCallbackISSInterface</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, lm_int_cb.o(i.ProcCallbackISSInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ProcCallbackISSInterface
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_iss_inerface_process_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lm_int_cb.o(i.ProcCallbackCmds_Init)
</UL>
<P><STRONG><a name="[21c]"></a>RMAP_CalculateCRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, crc16.o(i.RMAP_CalculateCRC))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8_rmap_header
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8_rmap_data
</UL>

<P><STRONG><a name="[160]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>

<P><STRONG><a name="[167]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[164]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1c0]"></a>RegisterAllVars</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lm_interfaces.o(i.RegisterAllVars))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RegisterAllVars &rArr; CAN_RegisterVar &rArr; CAN_FilterAssign
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RegisterVar
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interfaces_init
</UL>

<P><STRONG><a name="[43]"></a>SPI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI2_IRQHandler &rArr; HAL_SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1c3]"></a>SystemClock_Config</STRONG> (Thumb, 200 bytes, Stack size 96 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>SystemInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; led_processor &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; led_processor &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; led_processor &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; led_processor &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[173]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[175]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[53]"></a>UART4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; pn_dcr_uart_rx_prcs_cb &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; pn_dcr_uart_rx_prcs_cb &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; pn_dcr_uart_rx_prcs_cb &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; pn_dcr_uart_rx_prcs_cb &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USART6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART6_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; pn_dcr_uart_rx_prcs_cb &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>USBD_CDC_GetDeviceQualifierDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetDeviceQualifierDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1cb]"></a>USBD_CDC_ReceivePacket</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_uart_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_uart_CDC_Receive
</UL>

<P><STRONG><a name="[1b6]"></a>USBD_CDC_RegisterInterface</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_RegisterInterface))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[305]"></a>USBD_CDC_SetRxBuffer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_SetRxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_uart_init
</UL>

<P><STRONG><a name="[304]"></a>USBD_CDC_SetTxBuffer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_CDC_SetTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_SetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_uart_write
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_uart_init
</UL>

<P><STRONG><a name="[1cf]"></a>USBD_CDC_TransmitPacket</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_TransmitPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_uart_write
</UL>

<P><STRONG><a name="[1eb]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[1d2]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[1d3]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1ce]"></a>USBD_CtlError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1cd]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
</UL>

<P><STRONG><a name="[1d5]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1cc]"></a>USBD_CtlSendData</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1d1]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[5]"></a>USBD_FS_ConfigStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_FS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>USBD_FS_DeviceDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBD_FS_InterfaceStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>USBD_FS_LangIDStrDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBD_FS_ManufacturerStrDescriptor</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBD_FS_ProductStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_FS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBD_FS_SerialStrDescriptor</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_FS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_FS_SerialStrDescriptor &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1d6]"></a>USBD_GetString</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetLen
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ProductStrDescriptor
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ManufacturerStrDescriptor
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_InterfaceStrDescriptor
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[1dd]"></a>USBD_Get_USB_Status</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_Get_USB_Status))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[1b4]"></a>USBD_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1dc]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1c6]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[11b]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[11d]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[119]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_DevConnected))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[11f]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[1c5]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_GetRxDataSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_GetRxDataSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataOut
</UL>

<P><STRONG><a name="[1db]"></a>USBD_LL_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[1ed]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[144]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoINIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[145]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[1c8]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<P><STRONG><a name="[1ca]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[14f]"></a>USBD_LL_Reset</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[150]"></a>USBD_LL_Resume</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[151]"></a>USBD_LL_SOF</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[14e]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[1e2]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress &rArr; USB_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[155]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[1d4]"></a>USBD_LL_StallEP</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1e7]"></a>USBD_LL_Start</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[159]"></a>USBD_LL_Suspend</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[1c4]"></a>USBD_LL_Transmit</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataIn
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[1e3]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1b5]"></a>USBD_RegisterClass</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1de]"></a>USBD_RunTestMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1ea]"></a>USBD_SetClassConfig</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[1b7]"></a>USBD_Start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1e4]"></a>USBD_StdDevReq</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1e6]"></a>USBD_StdEPReq</STRONG> (Thumb, 568 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1e5]"></a>USBD_StdItfReq</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[125]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[13b]"></a>USB_ActivateSetup</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateSetup))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>USB_CoreInit</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, stm32f4xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[121]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[157]"></a>USB_DevConnect</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[14d]"></a>USB_DevDisconnect</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DevDisconnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[14c]"></a>USB_DevInit</STRONG> (Thumb, 482 bytes, Stack size 36 bytes, stm32f4xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevSpeed
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[148]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[127]"></a>USB_EP0StartXfer</STRONG> (Thumb, 468 bytes, Stack size 20 bytes, stm32f4xx_ll_usb.o(i.USB_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[12b]"></a>USB_EP0_OutStart</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[123]"></a>USB_EPClearStall</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[12a]"></a>USB_EPSetStall</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[128]"></a>USB_EPStartXfer</STRONG> (Thumb, 832 bytes, Stack size 32 bytes, stm32f4xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[158]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[1f0]"></a>USB_FlushRxFifo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[13a]"></a>USB_FlushTxFifo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>USB_GetDevSpeed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_GetDevSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_GetDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[12e]"></a>USB_GetMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[134]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevInEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ReadDevInEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevOutEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadDevOutEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>USB_ReadInterrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>USB_ReadPacket</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, stm32f4xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>USB_SetCurrentMode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[153]"></a>USB_SetDevAddress</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[1ef]"></a>USB_SetDevSpeed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_SetDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[13e]"></a>USB_SetTurnaroundTime</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_SetTurnaroundTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetTurnaroundTime
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1b8]"></a>USB_WritePacket</STRONG> (Thumb, 60 bytes, Stack size 28 bytes, stm32f4xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
</UL>

<P><STRONG><a name="[1a]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1f1]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[319]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[de]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_last_status
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_last_frame
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_start
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_process
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_load_parameters
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_cyclogram_process
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_stop
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_set_iku_default
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_pwr_on
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_pwr_off
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_check_and_save_tmi
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_stop
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_set_iku_default
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_pwr_on
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_pwr_off
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_check_and_save_tmi
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11_A_B_write_mode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11_A_B_stop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_write_mode
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_stop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_set_iku_default
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_read_req_mode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_read_req_all
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_read_mode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_read_all
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_pwr_on
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_pwr_off
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_interface_reset_and_sync
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_fpga_on
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_fpga_mcu_on
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_check_and_save_tmi
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_write_mode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_stop
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_set_iku_default
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_read_req_mode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_read_req_all
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_read_mode
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_read_all
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_pwr_on
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_pwr_off
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_interface_reset_and_sync
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_fpga_on
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_fpga_mcu_on
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_check_and_save_tmi
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_stop_step_run
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_buff
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_11_seq_read_request
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_send_cmd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_run_step_function
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_test
</UL>

<P><STRONG><a name="[31a]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[31b]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1f3]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[31c]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[29f]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_iss_get_app_lvl_reprot
</UL>

<P><STRONG><a name="[31d]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[31e]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[31f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[320]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[321]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[204]"></a>_app_lvl_error_collector</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, pn_11_interface_app_lvl.o(i._app_lvl_error_collector))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_write
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_read_req
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_process
</UL>

<P><STRONG><a name="[207]"></a>_app_lvl_form_data</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, pn_11_interface_app_lvl.o(i._app_lvl_form_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _app_lvl_form_data
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_write
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_read_req
</UL>

<P><STRONG><a name="[d7]"></a>_can_vcp_error_collector</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, can_vcp.o(i._can_vcp_error_collector))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_vcp_read_process
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_vcp_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_VCP_RX_Handler
</UL>

<P><STRONG><a name="[1f6]"></a>_get_month_offset</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, clock.o(i._get_month_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_set_time_s
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_time_s
</UL>

<P><STRONG><a name="[2b4]"></a>_pn_11_error_collector</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, pn11.o(i._pn_11_error_collector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _pn_11_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_reset_state
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_tmp_check
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_pwr_check
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_interface_process
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_init
</UL>

<P><STRONG><a name="[1f7]"></a>_pn_11_seq_read_request</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, pn11.o(i._pn_11_seq_read_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = _pn_11_seq_read_request &rArr; pn_11_read_req_u32_data &rArr; app_lvl_read_req &rArr; tr_lvl_send_data &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_read_req_u32_data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_seq_read_start
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_interface_process
</UL>

<P><STRONG><a name="[2c5]"></a>_pn_12_error_collector</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, pn12.o(i._pn_12_error_collector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _pn_12_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_reset_state
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_tmp_check
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_pwr_check
</UL>

<P><STRONG><a name="[2cd]"></a>_pn_20_error_collector</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, pn20.o(i._pn_20_error_collector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _pn_20_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_reset_state
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_tmp_check
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_pwr_check
</UL>

<P><STRONG><a name="[2d8]"></a>_pn_dcr_error_collector</STRONG> (Thumb, 376 bytes, Stack size 8 bytes, pn_dcr.o(i._pn_dcr_error_collector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _pn_dcr_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_reset_state
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_set_mode
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_run_step_function
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_pwr_check
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_process_rx_frames
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_flight_task_process
</UL>

<P><STRONG><a name="[2d4]"></a>_pn_dcr_fill_data_array</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, pn_dcr.o(i._pn_dcr_fill_data_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _pn_dcr_fill_data_array
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_fill_default_flight_task
</UL>

<P><STRONG><a name="[2e2]"></a>_pn_dcr_form_frame</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pn_dcr.o(i._pn_dcr_form_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _pn_dcr_form_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_send_cmd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_run_step_function
</UL>

<P><STRONG><a name="[2e4]"></a>_pn_dcr_form_snc_time_frame</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pn_dcr.o(i._pn_dcr_form_snc_time_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _pn_dcr_form_snc_time_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_send_cmd
</UL>

<P><STRONG><a name="[2e6]"></a>_pn_dcr_uart_error_collector</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, pn_dcr.o(i._pn_dcr_uart_error_collector))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_rx_prcs_cb
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_err_prcs_cb
</UL>

<P><STRONG><a name="[1fc]"></a>_reg_rec_setup</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, lm_interfaces.o(i._reg_rec_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _reg_rec_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interfaces_init
</UL>

<P><STRONG><a name="[302]"></a>_timer_is_run</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vcp_time_segmentation.o(i._timer_is_run))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_uart_read
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_uart_CDC_Receive
</UL>

<P><STRONG><a name="[1fd]"></a>app_lvl_get_last_rx_frame</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pn_11_interface_app_lvl.o(i.app_lvl_get_last_rx_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_lvl_get_last_rx_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_get_last_frame_in_128B_format
</UL>

<P><STRONG><a name="[1fe]"></a>app_lvl_get_rx_frame</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pn_11_interface_app_lvl.o(i.app_lvl_get_rx_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_lvl_get_rx_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_interface_process
</UL>

<P><STRONG><a name="[1ff]"></a>app_lvl_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pn_11_interface_app_lvl.o(i.app_lvl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_lvl_init &rArr; tr_lvl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_parameters_default
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_interface_init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_interface_init
</UL>

<P><STRONG><a name="[200]"></a>app_lvl_parameters_default</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pn_11_interface_app_lvl.o(i.app_lvl_parameters_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_lvl_parameters_default
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_reset
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_init
</UL>

<P><STRONG><a name="[202]"></a>app_lvl_process</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, pn_11_interface_app_lvl.o(i.app_lvl_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = app_lvl_process &rArr; app_lvl_read_check &rArr; rx_data_get
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_read_check
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_lvl_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_interface_process
</UL>

<P><STRONG><a name="[203]"></a>app_lvl_read_check</STRONG> (Thumb, 78 bytes, Stack size 272 bytes, pn_11_interface_app_lvl.o(i.app_lvl_read_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = app_lvl_read_check &rArr; rx_data_get
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data_get
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_process
</UL>

<P><STRONG><a name="[206]"></a>app_lvl_read_req</STRONG> (Thumb, 114 bytes, Stack size 280 bytes, pn_11_interface_app_lvl.o(i.app_lvl_read_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = app_lvl_read_req &rArr; tr_lvl_send_data &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_lvl_form_data
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_lvl_error_collector
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_send_data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_read_req_u32_data
</UL>

<P><STRONG><a name="[209]"></a>app_lvl_reset</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pn_11_interface_app_lvl.o(i.app_lvl_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_lvl_reset &rArr; tr_lvl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_parameters_default
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_interface_reset
</UL>

<P><STRONG><a name="[20a]"></a>app_lvl_write</STRONG> (Thumb, 106 bytes, Stack size 280 bytes, pn_11_interface_app_lvl.o(i.app_lvl_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = app_lvl_write &rArr; tr_lvl_send_data &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_lvl_form_data
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_lvl_error_collector
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_send_data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_write_u32_data
</UL>

<P><STRONG><a name="[20b]"></a>blocking_test</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.blocking_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = blocking_test &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20d]"></a>can_vcp_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, can_vcp.o(i.can_vcp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_vcp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_vcp_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>can_vcp_packet_send</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, can_vcp.o(i.can_vcp_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = can_vcp_packet_send &rArr; vcp_uart_write &rArr;  vcp_uart_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_uart_write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_VCP_RX_Handler
</UL>

<P><STRONG><a name="[20f]"></a>can_vcp_read_process</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, can_vcp.o(i.can_vcp_read_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = can_vcp_read_process &rArr; CAN_VCP_RX_Handler &rArr; can_vcp_packet_send &rArr; vcp_uart_write &rArr;  vcp_uart_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_uart_read
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_vcp_error_collector
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_VCP_RX_Handler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[211]"></a>clock_get_time_s</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, clock.o(i.clock_get_time_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_month_offset
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_create_header
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[212]"></a>clock_get_unix_time_s</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, clock.o(i.clock_get_unix_time_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = clock_get_unix_time_s &rArr; xtmtot
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtmtot
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_send_cmd
</UL>

<P><STRONG><a name="[214]"></a>clock_init</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, clock.o(i.clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clock_init &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_init
</UL>

<P><STRONG><a name="[215]"></a>clock_set_time_s</STRONG> (Thumb, 326 bytes, Stack size 256 bytes, clock.o(i.clock_set_time_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = clock_set_time_s &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_month_offset
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_ctrl_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28d]"></a>cmd_check_to_process</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lm_interfaces.o(i.cmd_check_to_process))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>cmd_process_cb</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, lm_interfaces.o(i.cmd_process_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cmd_process_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_status
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCallbackCmds
</UL>

<P><STRONG><a name="[217]"></a>cmd_process_dcr_write_flight_task</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, lm_int_cb.o(i.cmd_process_dcr_write_flight_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = cmd_process_dcr_write_flight_task &rArr; ext_mem_wr_frame_from_part_by_addr &rArr; ext_mem_wr_data_frame &rArr; ext_mem_any_write &rArr; cy15_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_load_can_flight_task
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_wr_frame_from_part_by_addr
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_status
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21a]"></a>cmd_process_test_led</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, lm_int_cb.o(i.cmd_process_test_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmd_process_test_led &rArr; led_alt_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_alt_setup
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_status
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[216]"></a>cmd_set_status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lm_interfaces.o(i.cmd_set_status))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process_test_led
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process_dcr_write_flight_task
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process_cb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28e]"></a>cmdreg_check_to_process</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lm_interfaces.o(i.cmdreg_check_to_process))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b9]"></a>cmdreg_process_cb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lm_interfaces.o(i.cmdreg_process_cb))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCallbackCmdRegs
</UL>

<P><STRONG><a name="[21b]"></a>crc8_rmap_data</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, crc16.o(i.crc8_rmap_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_byte
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMAP_CalculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_create_data_frame
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data_check
</UL>

<P><STRONG><a name="[21e]"></a>crc8_rmap_header</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, crc16.o(i.crc8_rmap_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc8_rmap_header
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMAP_CalculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_create_frame
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_check_frame
</UL>

<P><STRONG><a name="[21f]"></a>cy15_init</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, cy15b104qn_spi.o(i.cy15_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cy15_init &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_parameters_set
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_init
</UL>

<P><STRONG><a name="[223]"></a>cy15_read</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, cy15b104qn_spi.o(i.cy15_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cy15_read &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_any_read_8b_block
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_any_read
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_any_line_read_8b_block
</UL>

<P><STRONG><a name="[224]"></a>cy15_write</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, cy15b104qn_spi.o(i.cy15_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cy15_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_any_write
</UL>

<P><STRONG><a name="[225]"></a>cyclogram_init</STRONG> (Thumb, 2686 bytes, Stack size 24 bytes, pl_cyclogram.o(i.cyclogram_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cyclogram_init &rArr; cyclogram_step_init
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_stop_step_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_step_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_reset_state
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_init
</UL>

<P><STRONG><a name="[228]"></a>cyclogram_process</STRONG> (Thumb, 676 bytes, Stack size 32 bytes, pl_cyclogram.o(i.cyclogram_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = cyclogram_process &rArr; cyclogram_stop_step_run &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_stop_step_run
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_cyclogram_process
</UL>

<P><STRONG><a name="[22a]"></a>cyclogram_reset_state</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, pl_cyclogram.o(i.cyclogram_reset_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cyclogram_reset_state &rArr; cyclogram_init &rArr; cyclogram_step_init
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_init
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_reset_state
</UL>

<P><STRONG><a name="[22c]"></a>cyclogram_single_init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, pl_cyclogram.o(i.cyclogram_single_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cyclogram_single_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_start
</UL>

<P><STRONG><a name="[22b]"></a>cyclogram_start</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, pl_cyclogram.o(i.cyclogram_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = cyclogram_start &rArr; cyclogram_stop_step_run &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_stop_step_run
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_single_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_set_cfg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[226]"></a>cyclogram_step_init</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, pl_cyclogram.o(i.cyclogram_step_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cyclogram_step_init
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_init
</UL>

<P><STRONG><a name="[227]"></a>cyclogram_stop_step_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pl_cyclogram.o(i.cyclogram_stop_step_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cyclogram_stop_step_init
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_init
</UL>

<P><STRONG><a name="[229]"></a>cyclogram_stop_step_run</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, pl_cyclogram.o(i.cyclogram_stop_step_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cyclogram_stop_step_run &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_start
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_process
</UL>

<P><STRONG><a name="[295]"></a>dcr_inerface_check_to_process</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, lm_interfaces.o(i.dcr_inerface_check_to_process))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bd]"></a>dcr_inerface_process_cb</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lm_interfaces.o(i.dcr_inerface_process_cb))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCallbackDCRInterface
</UL>

<P><STRONG><a name="[22d]"></a>ext_mem_any_line_read_8b_block</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ext_mem.o(i.ext_mem_any_line_read_8b_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ext_mem_any_line_read_8b_block &rArr; cy15_read &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_read_from_part_8b
</UL>

<P><STRONG><a name="[22e]"></a>ext_mem_any_read</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ext_mem.o(i.ext_mem_any_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ext_mem_any_read &rArr; cy15_read &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lock
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_lock
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_read
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_rd_param
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_rd_data_frame
</UL>

<P><STRONG><a name="[231]"></a>ext_mem_any_read_8b_block</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ext_mem.o(i.ext_mem_any_read_8b_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ext_mem_any_read_8b_block &rArr; cy15_read &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_read
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_rd_data_frame_8b_block
</UL>

<P><STRONG><a name="[232]"></a>ext_mem_any_write</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ext_mem.o(i.ext_mem_any_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ext_mem_any_write &rArr; cy15_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lock
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_lock
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_write
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_wr_param
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_wr_data_frame
</UL>

<P><STRONG><a name="[233]"></a>ext_mem_format_part</STRONG> (Thumb, 110 bytes, Stack size 144 bytes, ext_mem.o(i.ext_mem_format_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ext_mem_format_part &rArr; ext_mem_wr_data_frame &rArr; ext_mem_any_write &rArr; cy15_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_wr_data_frame
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_reset_state
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[235]"></a>ext_mem_init</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ext_mem.o(i.ext_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ext_mem_init &rArr; part_rel_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_rel_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_const_init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_init
</UL>

<P><STRONG><a name="[238]"></a>ext_mem_rd_data_frame</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ext_mem.o(i.ext_mem_rd_data_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ext_mem_rd_data_frame &rArr; ext_mem_any_read &rArr; cy15_read &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_any_read
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_rd_frame_from_part_by_addr
</UL>

<P><STRONG><a name="[239]"></a>ext_mem_rd_data_frame_8b_block</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ext_mem.o(i.ext_mem_rd_data_frame_8b_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ext_mem_rd_data_frame_8b_block &rArr; ext_mem_any_read_8b_block &rArr; cy15_read &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_any_read_8b_block
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_read_from_part_8b
</UL>

<P><STRONG><a name="[23a]"></a>ext_mem_rd_frame_from_part_by_addr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ext_mem.o(i.ext_mem_rd_frame_from_part_by_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ext_mem_rd_frame_from_part_by_addr &rArr; ext_mem_rd_data_frame &rArr; ext_mem_any_read &rArr; cy15_read &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_rd_data_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_load_parameters
</UL>

<P><STRONG><a name="[23b]"></a>ext_mem_rd_param</STRONG> (Thumb, 64 bytes, Stack size 152 bytes, ext_mem.o(i.ext_mem_rd_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ext_mem_rd_param &rArr; ext_mem_any_read &rArr; cy15_read &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norby_crc16_calc
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_any_read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_load_parameters
</UL>

<P><STRONG><a name="[1be]"></a>ext_mem_read_from_part_8b</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ext_mem.o(i.ext_mem_read_from_part_8b))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ext_mem_read_from_part_8b &rArr; ext_mem_rd_data_frame_8b_block &rArr; ext_mem_any_read_8b_block &rArr; cy15_read &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_wr_rd_ptr_calc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_rd_data_frame_8b_block
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_any_line_read_8b_block
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCallbackExtMems
</UL>

<P><STRONG><a name="[294]"></a>ext_mem_set_rd_ptr_for_part</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, ext_mem.o(i.ext_mem_set_rd_ptr_for_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ext_mem_set_rd_ptr_for_part
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[234]"></a>ext_mem_wr_data_frame</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ext_mem.o(i.ext_mem_wr_data_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ext_mem_wr_data_frame &rArr; ext_mem_any_write &rArr; cy15_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_any_write
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_wr_frame_to_part
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_format_part
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_wr_frame_from_part_by_addr
</UL>

<P><STRONG><a name="[219]"></a>ext_mem_wr_frame_from_part_by_addr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ext_mem.o(i.ext_mem_wr_frame_from_part_by_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ext_mem_wr_frame_from_part_by_addr &rArr; ext_mem_wr_data_frame &rArr; ext_mem_any_write &rArr; cy15_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_wr_data_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process_dcr_write_flight_task
</UL>

<P><STRONG><a name="[23e]"></a>ext_mem_wr_frame_to_part</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ext_mem.o(i.ext_mem_wr_frame_to_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ext_mem_wr_frame_to_part &rArr; ext_mem_wr_data_frame &rArr; ext_mem_any_write &rArr; cy15_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_wr_rd_ptr_calc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_wr_data_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pl_cyclogramm_result
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_dcr_rx_frame
</UL>

<P><STRONG><a name="[23f]"></a>ext_mem_wr_param</STRONG> (Thumb, 60 bytes, Stack size 152 bytes, ext_mem.o(i.ext_mem_wr_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ext_mem_wr_param &rArr; ext_mem_any_write &rArr; cy15_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norby_crc16_calc
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_any_write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_save_parameters
</UL>

<P><STRONG><a name="[240]"></a>fill_dcr_rx_frame</STRONG> (Thumb, 342 bytes, Stack size 408 bytes, lm.o(i.fill_dcr_rx_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = fill_dcr_rx_frame &rArr; pn_dcr_get_last_status &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_last_status
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_last_frame
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_create_header
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_crc16_calc
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_wr_frame_to_part
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[245]"></a>fill_gen_tmi</STRONG> (Thumb, 324 bytes, Stack size 144 bytes, lm.o(i.fill_gen_tmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fill_gen_tmi &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_report_create
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_report_create
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_report_create
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_report_create
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_create_header
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_crc16_calc
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_report_create
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24b]"></a>fill_pl_cyclogramm_result</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lm.o(i.fill_pl_cyclogramm_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fill_pl_cyclogramm_result &rArr; ext_mem_wr_frame_to_part &rArr; ext_mem_wr_data_frame &rArr; ext_mem_any_write &rArr; cy15_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_wr_frame_to_part
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24c]"></a>fill_pl_iss_last_frame</STRONG> (Thumb, 286 bytes, Stack size 792 bytes, lm.o(i.fill_pl_iss_last_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = fill_pl_iss_last_frame &rArr; pn_11_get_last_frame_in_128B_format &rArr; app_lvl_get_last_rx_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_get_last_frame_in_128B_format
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_create_header
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_crc16_calc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24e]"></a>fill_tmi_and_beacon</STRONG> (Thumb, 544 bytes, Stack size 280 bytes, lm.o(i.fill_tmi_and_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = fill_tmi_and_beacon &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_get_free_volume_in_percantage
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_create_header
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_crc16_calc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tmi_const_mode
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_get_pwr_switch_key
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_get_pl_status
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[251]"></a>fill_tmi_const_mode</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, lm_interfaces_data.o(i.fill_tmi_const_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fill_tmi_const_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___20_lm_interfaces_data_c_7f0d20ee____REV16
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tmi_and_beacon
</UL>

<P><STRONG><a name="[81]"></a>fputc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, retarget_io.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stderr_putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[243]"></a>frame_crc16_calc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lm_interfaces_data.o(i.frame_crc16_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = frame_crc16_calc &rArr; norby_crc16_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norby_crc16_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tmi_and_beacon
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pl_iss_last_frame
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_gen_tmi
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_dcr_rx_frame
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_refresh
</UL>

<P><STRONG><a name="[242]"></a>frame_create_header</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, lm_interfaces_data.o(i.frame_create_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_time_s
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_save_parameters
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tmi_and_beacon
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pl_iss_last_frame
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_gen_tmi
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_dcr_rx_frame
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_refresh
</UL>

<P><STRONG><a name="[1c7]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[256]"></a>gpio_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, my_gpio.o(i.gpio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_create_report
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_alert_it_process
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_get_pwr_switch_key
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_create_report
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_alert_gd_it_process
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_get_outputs_state
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_get_inputs_state
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_get_outputs_state
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_get_inputs_state
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_get_outputs_state
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_get_inputs_state
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_outputs_state
</UL>

<P><STRONG><a name="[220]"></a>gpio_parameters_set</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, my_gpio.o(i.gpio_parameters_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_parameters_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_init
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_init
</UL>

<P><STRONG><a name="[221]"></a>gpio_set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, my_gpio.o(i.gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_on_off
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_output_set
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_processor
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_write
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_read
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy15_init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_output_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_output_set
</UL>

<P><STRONG><a name="[258]"></a>ina226_body_read_queue</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ina226.o(i.ina226_body_read_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_reg_addr_set
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_read_request
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_read_data_process
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_cb_it_process
</UL>

<P><STRONG><a name="[2e8]"></a>ina226_error_process</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ina226.o(i.ina226_error_process))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_cb_it_process
</UL>

<P><STRONG><a name="[25c]"></a>ina226_init</STRONG> (Thumb, 530 bytes, Stack size 88 bytes, ina226.o(i.ina226_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ina226_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_init
</UL>

<P><STRONG><a name="[25a]"></a>ina226_read_data_process</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, ina226.o(i.ina226_read_data_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_ina226_c_b36cdfcc____REV16
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_body_read_queue
</UL>

<P><STRONG><a name="[259]"></a>ina226_read_request</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ina226.o(i.ina226_read_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ina226_read_request &rArr; HAL_I2C_Master_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_body_read_queue
</UL>

<P><STRONG><a name="[25b]"></a>ina226_reg_addr_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ina226.o(i.ina226_reg_addr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ina226_reg_addr_set &rArr; HAL_I2C_Master_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_start_read_queue
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_body_read_queue
</UL>

<P><STRONG><a name="[260]"></a>ina226_start_read_queue</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ina226.o(i.ina226_start_read_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ina226_start_read_queue &rArr; ina226_reg_addr_set &rArr; HAL_I2C_Master_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_reg_addr_set
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_process
</UL>

<P><STRONG><a name="[1bc]"></a>interface_cb_registration</STRONG> (Thumb, 56 bytes, Stack size 36 bytes, lm_interfaces.o(i.interface_cb_registration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = interface_cb_registration
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCallbackCmds_Init
</UL>

<P><STRONG><a name="[261]"></a>interfaces_init</STRONG> (Thumb, 812 bytes, Stack size 64 bytes, lm_interfaces.o(i.interfaces_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = interfaces_init &rArr; RegisterAllVars &rArr; CAN_RegisterVar &rArr; CAN_FilterAssign
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reg_rec_setup
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterAllVars
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_init
</UL>

<P><STRONG><a name="[e9]"></a>led_alt_setup</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.led_alt_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_alt_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process_test_led
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[262]"></a>led_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = led_init &rArr; gpio_parameters_set
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_parameters_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>led_processor</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, led.o(i.led_processor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = led_processor &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[284]"></a>led_setup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led.o(i.led_setup))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[263]"></a>lm_ctrl_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lm.o(i.lm_ctrl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lm_ctrl_init &rArr; clock_set_time_s &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_set_time_s
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_reset_state
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_init
</UL>

<P><STRONG><a name="[264]"></a>lm_cyclogram_process</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, lm.o(i.lm_cyclogram_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lm_cyclogram_process &rArr; cyclogram_process &rArr; cyclogram_stop_step_run &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_get_free_volume_in_percantage
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_process
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[265]"></a>lm_get_cfg</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, lm.o(i.lm_get_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lm_get_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_save_parameters
</UL>

<P><STRONG><a name="[24f]"></a>lm_get_pl_status</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, lm.o(i.lm_get_pl_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lm_get_pl_status
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_short_status
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_get_short_status
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_get_short_status
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_get_short_status
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tmi_and_beacon
</UL>

<P><STRONG><a name="[26a]"></a>lm_init</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, lm.o(i.lm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lm_init &rArr; lm_ctrl_init &rArr; clock_set_time_s &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interfaces_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_create_header
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_crc16_calc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_time_s
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_ctrl_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26e]"></a>lm_load_parameters</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, lm.o(i.lm_load_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lm_load_parameters &rArr; ext_mem_rd_param &rArr; ext_mem_any_read &rArr; cy15_read &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_set_cfg
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_load_can_flight_task
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_set_cfg
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_set_cfg
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_set_cfg
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_rd_param
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_rd_frame_from_part_by_addr
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_set_cfg
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[274]"></a>lm_pl_inhibit_set</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lm.o(i.lm_pl_inhibit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lm_pl_inhibit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_set_inh
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_set_inh
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_set_inh
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_set_inh
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_set_inh
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[246]"></a>lm_report_create</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, lm.o(i.lm_report_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lm_report_create
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_gen_tmi
</UL>

<P><STRONG><a name="[27a]"></a>lm_reset_state</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, lm.o(i.lm_reset_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lm_reset_state &rArr; lm_ctrl_init &rArr; clock_set_time_s &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_reset_state
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_reset_state
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_reset_state
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_reset_state
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_format_part
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_reset_state
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_ctrl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27f]"></a>lm_save_parameters</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, lm.o(i.lm_save_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lm_save_parameters &rArr; ext_mem_wr_param &rArr; ext_mem_any_write &rArr; cy15_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_cfg
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_get_cfg
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_get_cfg
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_get_cfg
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_create_header
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_wr_param
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_get_cfg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26f]"></a>lm_set_cfg</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, lm.o(i.lm_set_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lm_set_cfg &rArr; cyclogram_start &rArr; cyclogram_stop_step_run &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_start
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_set_inh
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_load_parameters
</UL>

<P><STRONG><a name="[275]"></a>lm_set_inh</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lm.o(i.lm_set_inh))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_set_cfg
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_pl_inhibit_set
</UL>

<P><STRONG><a name="[6f]"></a>main</STRONG> (Thumb, 2222 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = main &rArr; fill_pl_iss_last_frame &rArr; pn_11_get_last_frame_in_128B_format &rArr; app_lvl_get_last_rx_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_format_part
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_start
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_set_time_s
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_time_s
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_process
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_process
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_on_off
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_iss_get_app_lvl_reprot
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_save_parameters
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_reset_state
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_pl_inhibit_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_load_parameters
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_cyclogram_process
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tmi_and_beacon
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pl_iss_last_frame
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pl_cyclogramm_result
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_gen_tmi
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_dcr_rx_frame
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_buff
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_process
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_output_set
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_can_instasend
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setup
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_alt_setup
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_vcp_read_process
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_vcp_init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_set_rd_ptr_for_part
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process_test_led
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process_dcr_write_flight_task
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCallbackCmds_Init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_iss_inerface_check_to_process
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcr_inerface_check_to_process
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdreg_check_to_process
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_status
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_check_to_process
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_output_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_output_set
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_send
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_set_mode
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_process_rx_frames
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_process
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_test
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1c9]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<P><STRONG><a name="[23c]"></a>norby_crc16_calc</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, crc16.o(i.norby_crc16_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = norby_crc16_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_crc16_calc
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_wr_param
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_rd_param
</UL>

<P><STRONG><a name="[237]"></a>part_const_init</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ext_mem.o(i.part_const_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = part_const_init
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_init
</UL>

<P><STRONG><a name="[252]"></a>part_get_free_volume_in_percantage</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, ext_mem.o(i.part_get_free_volume_in_percantage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = part_get_free_volume_in_percantage &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_cyclogram_process
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tmi_and_beacon
</UL>

<P><STRONG><a name="[236]"></a>part_rel_init</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, ext_mem.o(i.part_rel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = part_rel_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_init
</UL>

<P><STRONG><a name="[23d]"></a>part_wr_rd_ptr_calc</STRONG> (Thumb, 342 bytes, Stack size 8 bytes, ext_mem.o(i.part_wr_rd_ptr_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = part_wr_rd_ptr_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_wr_frame_to_part
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_read_from_part_8b
</UL>

<P><STRONG><a name="[26d]"></a>pl_init</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, pl_cyclogram.o(i.pl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pl_init &rArr; pn_dcr_init &rArr; pn_dcr_set_cfg &rArr; pn_dcr_set_mode &rArr; pn_dcr_pwr_off &rArr; pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_init
</UL>

<P><STRONG><a name="[299]"></a>pl_iss_get_app_lvl_reprot</STRONG> (Thumb, 90 bytes, Stack size 128 bytes, lm.o(i.pl_iss_get_app_lvl_reprot))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pl_iss_get_app_lvl_reprot &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[298]"></a>pl_iss_inerface_check_to_process</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, lm_interfaces.o(i.pl_iss_inerface_check_to_process))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bf]"></a>pl_iss_inerface_process_cb</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lm_interfaces.o(i.pl_iss_inerface_process_cb))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCallbackISSInterface
</UL>

<P><STRONG><a name="[86]"></a>pl_pn11A_check_and_save_tmi</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, pl_cyclogram.o(i.pl_pn11A_check_and_save_tmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pl_pn11A_check_and_save_tmi &rArr; result_write_tmi_slice &rArr; result_refresh &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_tmi_slice_get_and_check
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_write_tmi_slice
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[94]"></a>pl_pn11A_fpga_mcu_on</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11A_fpga_mcu_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn11A_fpga_mcu_on &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_output_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[8a]"></a>pl_pn11A_fpga_on</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11A_fpga_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn11A_fpga_on &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_output_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[8c]"></a>pl_pn11A_interface_reset_and_sync</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11A_interface_reset_and_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn11A_interface_reset_and_sync &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_interface_synch
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_reset
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[9a]"></a>pl_pn11A_pwr_off</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11A_pwr_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn11A_pwr_off &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_pwr_off
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[88]"></a>pl_pn11A_pwr_on</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11A_pwr_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn11A_pwr_on &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_pwr_on
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[98]"></a>pl_pn11A_read_all</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, pl_cyclogram.o(i.pl_pn11A_read_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pl_pn11A_read_all &rArr; result_row_data_write &rArr; result_refresh &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_row_data_write
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[90]"></a>pl_pn11A_read_mode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11A_read_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn11A_read_mode &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[96]"></a>pl_pn11A_read_req_all</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11A_read_req_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = pl_pn11A_read_req_all &rArr; pn_11_seq_read_start &rArr; _pn_11_seq_read_request &rArr; pn_11_read_req_u32_data &rArr; app_lvl_read_req &rArr; tr_lvl_send_data &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_seq_read_start
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[8f]"></a>pl_pn11A_read_req_mode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11A_read_req_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = pl_pn11A_read_req_mode &rArr; pn_11_seq_read_start &rArr; _pn_11_seq_read_request &rArr; pn_11_read_req_u32_data &rArr; app_lvl_read_req &rArr; tr_lvl_send_data &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_seq_read_start
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[84]"></a>pl_pn11A_set_iku_default</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11A_set_iku_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn11A_set_iku_default &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_output_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[9d]"></a>pl_pn11A_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11A_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pl_pn11A_stop &rArr; result_emergency_stop &rArr; result_refresh &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_emergency_stop
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_pwr_off
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[8e]"></a>pl_pn11A_write_mode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11A_write_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = pl_pn11A_write_mode &rArr; pn_11_write_u32_data &rArr; app_lvl_write &rArr; tr_lvl_send_data &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_write_u32_data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[87]"></a>pl_pn11B_check_and_save_tmi</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, pl_cyclogram.o(i.pl_pn11B_check_and_save_tmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pl_pn11B_check_and_save_tmi &rArr; result_write_tmi_slice &rArr; result_refresh &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_tmi_slice_get_and_check
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_write_tmi_slice
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[95]"></a>pl_pn11B_fpga_mcu_on</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11B_fpga_mcu_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn11B_fpga_mcu_on &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_output_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[8b]"></a>pl_pn11B_fpga_on</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11B_fpga_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn11B_fpga_on &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_output_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[8d]"></a>pl_pn11B_interface_reset_and_sync</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11B_interface_reset_and_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn11B_interface_reset_and_sync &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_interface_synch
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_reset
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[9b]"></a>pl_pn11B_pwr_off</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11B_pwr_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn11B_pwr_off &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_pwr_off
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[89]"></a>pl_pn11B_pwr_on</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11B_pwr_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn11B_pwr_on &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_pwr_on
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[99]"></a>pl_pn11B_read_all</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, pl_cyclogram.o(i.pl_pn11B_read_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pl_pn11B_read_all &rArr; result_row_data_write &rArr; result_refresh &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_row_data_write
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[93]"></a>pl_pn11B_read_mode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11B_read_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn11B_read_mode &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[97]"></a>pl_pn11B_read_req_all</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11B_read_req_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = pl_pn11B_read_req_all &rArr; pn_11_seq_read_start &rArr; _pn_11_seq_read_request &rArr; pn_11_read_req_u32_data &rArr; app_lvl_read_req &rArr; tr_lvl_send_data &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_seq_read_start
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[92]"></a>pl_pn11B_read_req_mode</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11B_read_req_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = pl_pn11B_read_req_mode &rArr; pn_11_seq_read_start &rArr; _pn_11_seq_read_request &rArr; pn_11_read_req_u32_data &rArr; app_lvl_read_req &rArr; tr_lvl_send_data &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_seq_read_start
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[85]"></a>pl_pn11B_set_iku_default</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11B_set_iku_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn11B_set_iku_default &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_output_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[9e]"></a>pl_pn11B_stop</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11B_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pl_pn11B_stop &rArr; result_emergency_stop &rArr; result_refresh &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_emergency_stop
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_pwr_off
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[91]"></a>pl_pn11B_write_mode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11B_write_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = pl_pn11B_write_mode &rArr; pn_11_write_u32_data &rArr; app_lvl_write &rArr; tr_lvl_send_data &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_write_u32_data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[aa]"></a>pl_pn11_A_B_stop</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn11_A_B_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pl_pn11_A_B_stop &rArr; result_emergency_stop &rArr; result_refresh &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_emergency_stop
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_pwr_off
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[a9]"></a>pl_pn11_A_B_write_mode</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, pl_cyclogram.o(i.pl_pn11_A_B_write_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = pl_pn11_A_B_write_mode &rArr; pn_11_write_u32_data &rArr; app_lvl_write &rArr; tr_lvl_send_data &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_write_u32_data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[a0]"></a>pl_pn12_check_and_save_tmi</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, pl_cyclogram.o(i.pl_pn12_check_and_save_tmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pl_pn12_check_and_save_tmi &rArr; result_write_tmi_slice &rArr; result_refresh &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_tmi_slice_get_and_check
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_write_tmi_slice
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[a2]"></a>pl_pn12_pwr_off</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn12_pwr_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn12_pwr_off &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_pwr_on
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[a1]"></a>pl_pn12_pwr_on</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn12_pwr_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn12_pwr_on &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_pwr_on
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[9f]"></a>pl_pn12_set_iku_default</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn12_set_iku_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn12_set_iku_default &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_output_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[a3]"></a>pl_pn12_stop</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn12_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pl_pn12_stop &rArr; result_emergency_stop &rArr; result_refresh &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_emergency_stop
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_pwr_off
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[a5]"></a>pl_pn20_check_and_save_tmi</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, pl_cyclogram.o(i.pl_pn20_check_and_save_tmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pl_pn20_check_and_save_tmi &rArr; result_write_tmi_slice &rArr; result_refresh &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_tmi_slice_get_and_check
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_write_tmi_slice
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[a7]"></a>pl_pn20_pwr_off</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn20_pwr_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn20_pwr_off &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_pwr_on
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[a6]"></a>pl_pn20_pwr_on</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn20_pwr_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn20_pwr_on &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_pwr_on
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[a4]"></a>pl_pn20_set_iku_default</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn20_set_iku_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pl_pn20_set_iku_default &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_output_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[a8]"></a>pl_pn20_stop</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pl_cyclogram.o(i.pl_pn20_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pl_pn20_stop &rArr; result_emergency_stop &rArr; result_refresh &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_emergency_stop
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_pwr_off
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[29a]"></a>pn_11_can_instasend</STRONG> (Thumb, 118 bytes, Stack size 144 bytes, pn11.o(i.pn_11_can_instasend))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = pn_11_can_instasend &rArr; pn_11_write_u32_data &rArr; app_lvl_write &rArr; tr_lvl_send_data &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_write_u32_data
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_read_req_u32_data
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[280]"></a>pn_11_get_cfg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pn11.o(i.pn_11_get_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pn_11_get_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_save_parameters
</UL>

<P><STRONG><a name="[2b0]"></a>pn_11_get_inputs_state</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pn11.o(i.pn_11_get_inputs_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pn_11_get_inputs_state &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_report_create
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_tmi_slice_create
</UL>

<P><STRONG><a name="[24d]"></a>pn_11_get_last_frame_in_128B_format</STRONG> (Thumb, 80 bytes, Stack size 272 bytes, pn11.o(i.pn_11_get_last_frame_in_128B_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pn_11_get_last_frame_in_128B_format &rArr; app_lvl_get_last_rx_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_get_last_rx_frame
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pl_iss_last_frame
</UL>

<P><STRONG><a name="[2b1]"></a>pn_11_get_outputs_state</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, pn11.o(i.pn_11_get_outputs_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pn_11_get_outputs_state &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_report_create
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_tmi_slice_create
</UL>

<P><STRONG><a name="[266]"></a>pn_11_get_short_status</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pn11.o(i.pn_11_get_short_status))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_get_pl_status
</UL>

<P><STRONG><a name="[29b]"></a>pn_11_init</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, pn11.o(i.pn_11_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pn_11_init &rArr; pn_11_interface_init &rArr; app_lvl_init &rArr; tr_lvl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_parameters_set
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_set_bound
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_report_reset
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_output_set
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_interface_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_11_error_collector
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_set_bound
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_init
</UL>

<P><STRONG><a name="[2b6]"></a>pn_11_interface_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pn11.o(i.pn_11_interface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pn_11_interface_init &rArr; app_lvl_init &rArr; tr_lvl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_init
</UL>

<P><STRONG><a name="[2b7]"></a>pn_11_interface_process</STRONG> (Thumb, 176 bytes, Stack size 152 bytes, pn11.o(i.pn_11_interface_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = pn_11_interface_process &rArr; _pn_11_seq_read_request &rArr; pn_11_read_req_u32_data &rArr; app_lvl_read_req &rArr; tr_lvl_send_data &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_process
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_process
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_get_rx_frame
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_11_seq_read_request
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_11_error_collector
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_process
</UL>

<P><STRONG><a name="[2b9]"></a>pn_11_interface_reset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pn11.o(i.pn_11_interface_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pn_11_interface_reset &rArr; app_lvl_reset &rArr; tr_lvl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_reset
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_reset_state
</UL>

<P><STRONG><a name="[2a3]"></a>pn_11_interface_synch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pn11.o(i.pn_11_interface_synch))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pn_11_interface_synch &rArr; tr_lvl_synch &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_synch
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_interface_reset_and_sync
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_interface_reset_and_sync
</UL>

<P><STRONG><a name="[291]"></a>pn_11_output_set</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pn11.o(i.pn_11_output_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pn_11_output_set &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_reset_state
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_set_iku_default
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_fpga_on
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_fpga_mcu_on
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_set_iku_default
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_fpga_on
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_fpga_mcu_on
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28c]"></a>pn_11_process</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pn11.o(i.pn_11_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = pn_11_process &rArr; pn_11_interface_process &rArr; _pn_11_seq_read_request &rArr; pn_11_read_req_u32_data &rArr; app_lvl_read_req &rArr; tr_lvl_send_data &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_tmp_process
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_pwr_process
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_interface_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2bd]"></a>pn_11_pwr_check</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pn11.o(i.pn_11_pwr_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pn_11_pwr_check &rArr; pwr_ch_get_error &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_get_error
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_11_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_tmi_slice_get_and_check
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_pwr_process
</UL>

<P><STRONG><a name="[2a4]"></a>pn_11_pwr_off</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pn11.o(i.pn_11_pwr_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pn_11_pwr_off &rArr; pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_on_off
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_reset_state
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11_A_B_stop
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_stop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_pwr_off
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_stop
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_pwr_off
</UL>

<P><STRONG><a name="[2a5]"></a>pn_11_pwr_on</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pn11.o(i.pn_11_pwr_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pn_11_pwr_on &rArr; pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_on_off
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_pwr_on
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_pwr_on
</UL>

<P><STRONG><a name="[2bb]"></a>pn_11_pwr_process</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pn11.o(i.pn_11_pwr_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pn_11_pwr_process &rArr; pn_11_pwr_check &rArr; pwr_ch_get_error &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_pwr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_process
</UL>

<P><STRONG><a name="[1f8]"></a>pn_11_read_req_u32_data</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pn11.o(i.pn_11_read_req_u32_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = pn_11_read_req_u32_data &rArr; app_lvl_read_req &rArr; tr_lvl_send_data &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_read_req
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_can_instasend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_11_seq_read_request
</UL>

<P><STRONG><a name="[247]"></a>pn_11_report_create</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, pn11.o(i.pn_11_report_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pn_11_report_create &rArr; pn_11_get_outputs_state &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_get_outputs_state
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_get_inputs_state
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_gen_tmi
</UL>

<P><STRONG><a name="[2b5]"></a>pn_11_report_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pn11.o(i.pn_11_report_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pn_11_report_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_reset_state
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_init
</UL>

<P><STRONG><a name="[27b]"></a>pn_11_reset_state</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, pn11.o(i.pn_11_reset_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pn_11_reset_state &rArr; pn_11_pwr_off &rArr; pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_set_inh
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_report_reset
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_pwr_off
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_output_set
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_interface_reset
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_11_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_reset_state
</UL>

<P><STRONG><a name="[2a7]"></a>pn_11_seq_read_start</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pn11.o(i.pn_11_seq_read_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = pn_11_seq_read_start &rArr; _pn_11_seq_read_request &rArr; pn_11_read_req_u32_data &rArr; app_lvl_read_req &rArr; tr_lvl_send_data &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_11_seq_read_request
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_read_req_mode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_read_req_all
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_read_req_mode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_read_req_all
</UL>

<P><STRONG><a name="[270]"></a>pn_11_set_cfg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pn11.o(i.pn_11_set_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pn_11_set_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_set_inh
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_load_parameters
</UL>

<P><STRONG><a name="[276]"></a>pn_11_set_inh</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pn11.o(i.pn_11_set_inh))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_set_cfg
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_reset_state
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_pl_inhibit_set
</UL>

<P><STRONG><a name="[2c0]"></a>pn_11_tmi_slice_create</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, pn11.o(i.pn_11_tmi_slice_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pn_11_tmi_slice_create &rArr; pn_11_get_outputs_state &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_get_outputs_state
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_get_inputs_state
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_tmi_slice_get_and_check
</UL>

<P><STRONG><a name="[2a0]"></a>pn_11_tmi_slice_get_and_check</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, pn11.o(i.pn_11_tmi_slice_get_and_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pn_11_tmi_slice_get_and_check &rArr; pn_11_pwr_check &rArr; pwr_ch_get_error &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_tmp_check
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_tmi_slice_create
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_pwr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_check_and_save_tmi
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_check_and_save_tmi
</UL>

<P><STRONG><a name="[2c1]"></a>pn_11_tmp_check</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pn11.o(i.pn_11_tmp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pn_11_tmp_check &rArr; tmp1075_get_error
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_11_error_collector
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_get_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_tmp_process
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_tmi_slice_get_and_check
</UL>

<P><STRONG><a name="[2bc]"></a>pn_11_tmp_process</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pn11.o(i.pn_11_tmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pn_11_tmp_process &rArr; pn_11_tmp_check &rArr; tmp1075_get_error
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_tmp_check
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_process
</UL>

<P><STRONG><a name="[2a9]"></a>pn_11_write_u32_data</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, pn11.o(i.pn_11_write_u32_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = pn_11_write_u32_data &rArr; app_lvl_write &rArr; tr_lvl_send_data &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11_A_B_write_mode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_write_mode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_write_mode
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_can_instasend
</UL>

<P><STRONG><a name="[281]"></a>pn_12_get_cfg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pn12.o(i.pn_12_get_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pn_12_get_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_save_parameters
</UL>

<P><STRONG><a name="[2c3]"></a>pn_12_get_inputs_state</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pn12.o(i.pn_12_get_inputs_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pn_12_get_inputs_state &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_report_create
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_tmi_slice_create
</UL>

<P><STRONG><a name="[2c4]"></a>pn_12_get_outputs_state</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, pn12.o(i.pn_12_get_outputs_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pn_12_get_outputs_state &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_report_create
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_tmi_slice_create
</UL>

<P><STRONG><a name="[267]"></a>pn_12_get_short_status</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pn12.o(i.pn_12_get_short_status))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_get_pl_status
</UL>

<P><STRONG><a name="[29c]"></a>pn_12_init</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, pn12.o(i.pn_12_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pn_12_init &rArr; pn_12_interface_init &rArr; app_lvl_init &rArr; tr_lvl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_parameters_set
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_set_bound
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_set_bound
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_output_set
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_report_reset
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_interface_init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_12_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_init
</UL>

<P><STRONG><a name="[2c7]"></a>pn_12_interface_init</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pn12.o(i.pn_12_interface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pn_12_interface_init &rArr; app_lvl_init &rArr; tr_lvl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_init
</UL>

<P><STRONG><a name="[292]"></a>pn_12_output_set</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pn12.o(i.pn_12_output_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pn_12_output_set &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_reset_state
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_set_iku_default
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c8]"></a>pn_12_pwr_check</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pn12.o(i.pn_12_pwr_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pn_12_pwr_check &rArr; pwr_ch_get_error &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_get_error
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_12_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_tmi_slice_get_and_check
</UL>

<P><STRONG><a name="[2ac]"></a>pn_12_pwr_off</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pn12.o(i.pn_12_pwr_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pn_12_pwr_off &rArr; pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_on_off
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_reset_state
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_stop
</UL>

<P><STRONG><a name="[2ab]"></a>pn_12_pwr_on</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pn12.o(i.pn_12_pwr_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pn_12_pwr_on &rArr; pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_on_off
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_pwr_on
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_pwr_off
</UL>

<P><STRONG><a name="[248]"></a>pn_12_report_create</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, pn12.o(i.pn_12_report_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pn_12_report_create &rArr; pn_12_get_outputs_state &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_get_outputs_state
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_get_inputs_state
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_gen_tmi
</UL>

<P><STRONG><a name="[2c6]"></a>pn_12_report_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pn12.o(i.pn_12_report_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pn_12_report_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_reset_state
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_init
</UL>

<P><STRONG><a name="[27c]"></a>pn_12_reset_state</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pn12.o(i.pn_12_reset_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pn_12_reset_state &rArr; pn_12_pwr_off &rArr; pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_set_inh
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_pwr_off
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_output_set
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_report_reset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_12_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_reset_state
</UL>

<P><STRONG><a name="[271]"></a>pn_12_set_cfg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pn12.o(i.pn_12_set_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pn_12_set_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_set_inh
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_load_parameters
</UL>

<P><STRONG><a name="[277]"></a>pn_12_set_inh</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pn12.o(i.pn_12_set_inh))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_set_cfg
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_reset_state
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_pl_inhibit_set
</UL>

<P><STRONG><a name="[2c9]"></a>pn_12_tmi_slice_create</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, pn12.o(i.pn_12_tmi_slice_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pn_12_tmi_slice_create &rArr; pn_12_get_outputs_state &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_get_outputs_state
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_get_inputs_state
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_tmi_slice_get_and_check
</UL>

<P><STRONG><a name="[2aa]"></a>pn_12_tmi_slice_get_and_check</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, pn12.o(i.pn_12_tmi_slice_get_and_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pn_12_tmi_slice_get_and_check &rArr; pn_12_pwr_check &rArr; pwr_ch_get_error &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_tmp_check
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_tmi_slice_create
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_pwr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_check_and_save_tmi
</UL>

<P><STRONG><a name="[2ca]"></a>pn_12_tmp_check</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pn12.o(i.pn_12_tmp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pn_12_tmp_check &rArr; tmp1075_get_error
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_get_error
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_12_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_tmi_slice_get_and_check
</UL>

<P><STRONG><a name="[282]"></a>pn_20_get_cfg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pn20.o(i.pn_20_get_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pn_20_get_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_save_parameters
</UL>

<P><STRONG><a name="[2cb]"></a>pn_20_get_inputs_state</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pn20.o(i.pn_20_get_inputs_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pn_20_get_inputs_state &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_report_create
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_tmi_slice_create
</UL>

<P><STRONG><a name="[2cc]"></a>pn_20_get_outputs_state</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, pn20.o(i.pn_20_get_outputs_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pn_20_get_outputs_state &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_report_create
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_tmi_slice_create
</UL>

<P><STRONG><a name="[268]"></a>pn_20_get_short_status</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pn20.o(i.pn_20_get_short_status))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_get_pl_status
</UL>

<P><STRONG><a name="[29d]"></a>pn_20_init</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, pn20.o(i.pn_20_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pn_20_init &rArr; pn_20_output_set &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_parameters_set
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_set_bound
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_set_bound
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_output_set
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_report_reset
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_int_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_20_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_init
</UL>

<P><STRONG><a name="[2cf]"></a>pn_20_int_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pn20.o(i.pn_20_int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pn_20_int_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_init
</UL>

<P><STRONG><a name="[293]"></a>pn_20_output_set</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pn20.o(i.pn_20_output_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pn_20_output_set &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_reset_state
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_set_iku_default
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d0]"></a>pn_20_pwr_check</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pn20.o(i.pn_20_pwr_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pn_20_pwr_check &rArr; pwr_ch_get_error &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_get_error
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_20_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_tmi_slice_get_and_check
</UL>

<P><STRONG><a name="[2af]"></a>pn_20_pwr_off</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pn20.o(i.pn_20_pwr_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pn_20_pwr_off &rArr; pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_on_off
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_reset_state
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_stop
</UL>

<P><STRONG><a name="[2ae]"></a>pn_20_pwr_on</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pn20.o(i.pn_20_pwr_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pn_20_pwr_on &rArr; pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_on_off
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_pwr_on
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_pwr_off
</UL>

<P><STRONG><a name="[249]"></a>pn_20_report_create</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, pn20.o(i.pn_20_report_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pn_20_report_create &rArr; pn_20_get_outputs_state &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_get_outputs_state
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_get_inputs_state
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_gen_tmi
</UL>

<P><STRONG><a name="[2ce]"></a>pn_20_report_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pn20.o(i.pn_20_report_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pn_20_report_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_reset_state
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_init
</UL>

<P><STRONG><a name="[27d]"></a>pn_20_reset_state</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pn20.o(i.pn_20_reset_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pn_20_reset_state &rArr; pn_20_pwr_off &rArr; pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_set_inh
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_pwr_off
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_output_set
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_report_reset
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_20_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_reset_state
</UL>

<P><STRONG><a name="[272]"></a>pn_20_set_cfg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pn20.o(i.pn_20_set_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pn_20_set_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_set_inh
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_load_parameters
</UL>

<P><STRONG><a name="[278]"></a>pn_20_set_inh</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pn20.o(i.pn_20_set_inh))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_set_cfg
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_reset_state
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_pl_inhibit_set
</UL>

<P><STRONG><a name="[2d1]"></a>pn_20_tmi_slice_create</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, pn20.o(i.pn_20_tmi_slice_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pn_20_tmi_slice_create &rArr; pn_20_get_outputs_state &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_get_outputs_state
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_get_inputs_state
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_tmi_slice_get_and_check
</UL>

<P><STRONG><a name="[2ad]"></a>pn_20_tmi_slice_get_and_check</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, pn20.o(i.pn_20_tmi_slice_get_and_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pn_20_tmi_slice_get_and_check &rArr; pn_20_pwr_check &rArr; pwr_ch_get_error &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_tmp_check
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_tmi_slice_create
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_pwr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_check_and_save_tmi
</UL>

<P><STRONG><a name="[2d2]"></a>pn_20_tmp_check</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pn20.o(i.pn_20_tmp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pn_20_tmp_check &rArr; tmp1075_get_error
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_get_error
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_20_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_tmi_slice_get_and_check
</UL>

<P><STRONG><a name="[2d3]"></a>pn_dcr_fill_default_flight_task</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, pn_dcr.o(i.pn_dcr_fill_default_flight_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pn_dcr_fill_default_flight_task &rArr; _pn_dcr_fill_data_array
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_fill_flight_task_step
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_dcr_fill_data_array
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_init
</UL>

<P><STRONG><a name="[2d5]"></a>pn_dcr_fill_flight_task_step</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_fill_flight_task_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pn_dcr_fill_flight_task_step
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_fill_default_flight_task
</UL>

<P><STRONG><a name="[2d6]"></a>pn_dcr_flight_task_process</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_flight_task_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = pn_dcr_flight_task_process &rArr; pn_dcr_run_step_function &rArr; pn_dcr_send_cmd &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_set_mode
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_run_step_function
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_dcr_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_process
</UL>

<P><STRONG><a name="[283]"></a>pn_dcr_get_cfg</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_get_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pn_dcr_get_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_save_parameters
</UL>

<P><STRONG><a name="[2d9]"></a>pn_dcr_get_data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pn_dcr_get_data
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_process_rx_frames
</UL>

<P><STRONG><a name="[244]"></a>pn_dcr_get_last_frame</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_get_last_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pn_dcr_get_last_frame &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_buff
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_dcr_rx_frame
</UL>

<P><STRONG><a name="[241]"></a>pn_dcr_get_last_status</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_get_last_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pn_dcr_get_last_status &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_buff
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_dcr_rx_frame
</UL>

<P><STRONG><a name="[2da]"></a>pn_dcr_get_outputs_state</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_get_outputs_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pn_dcr_get_outputs_state &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_report_create
</UL>

<P><STRONG><a name="[269]"></a>pn_dcr_get_short_status</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pn_dcr.o(i.pn_dcr_get_short_status))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_get_pl_status
</UL>

<P><STRONG><a name="[29e]"></a>pn_dcr_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, pn_dcr.o(i.pn_dcr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pn_dcr_init &rArr; pn_dcr_set_cfg &rArr; pn_dcr_set_mode &rArr; pn_dcr_pwr_off &rArr; pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_set_cfg
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_reset_state
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_set_bound
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_fill_default_flight_task
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_init
</UL>

<P><STRONG><a name="[218]"></a>pn_dcr_load_can_flight_task</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_load_can_flight_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pn_dcr_load_can_flight_task
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_pn_dcr_c_02066efa____REV16
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_load_parameters
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process_dcr_write_flight_task
</UL>

<P><STRONG><a name="[289]"></a>pn_dcr_process</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = pn_dcr_process &rArr; pn_dcr_flight_task_process &rArr; pn_dcr_run_step_function &rArr; pn_dcr_send_cmd &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_set_status
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_pwr_process
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_flight_task_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28b]"></a>pn_dcr_process_rx_frames</STRONG> (Thumb, 144 bytes, Stack size 144 bytes, pn_dcr.o(i.pn_dcr_process_rx_frames))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pn_dcr_process_rx_frames &rArr; pn_dcr_get_data
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_data
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_dcr_error_collector
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2df]"></a>pn_dcr_pwr_check</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_pwr_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pn_dcr_pwr_check &rArr; pwr_ch_get_error &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_get_error
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_dcr_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_pwr_process
</UL>

<P><STRONG><a name="[2e0]"></a>pn_dcr_pwr_off</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_pwr_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pn_dcr_pwr_off &rArr; pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_on_off
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_set_mode
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_run_step_function
</UL>

<P><STRONG><a name="[2e1]"></a>pn_dcr_pwr_on</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_pwr_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pn_dcr_pwr_on &rArr; pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_on_off
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_run_step_function
</UL>

<P><STRONG><a name="[2dd]"></a>pn_dcr_pwr_process</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_pwr_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pn_dcr_pwr_process &rArr; pn_dcr_pwr_check &rArr; pwr_ch_get_error &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_pwr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_process
</UL>

<P><STRONG><a name="[24a]"></a>pn_dcr_report_create</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, pn_dcr.o(i.pn_dcr_report_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pn_dcr_report_create &rArr; pn_dcr_get_outputs_state &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_outputs_state
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_gen_tmi
</UL>

<P><STRONG><a name="[27e]"></a>pn_dcr_reset_state</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, pn_dcr.o(i.pn_dcr_reset_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pn_dcr_reset_state &rArr; pn_dcr_set_mode &rArr; pn_dcr_pwr_off &rArr; pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_set_inh
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_set_mode
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_dcr_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_reset_state
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_init
</UL>

<P><STRONG><a name="[2d7]"></a>pn_dcr_run_step_function</STRONG> (Thumb, 590 bytes, Stack size 176 bytes, pn_dcr.o(i.pn_dcr_run_step_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = pn_dcr_run_step_function &rArr; pn_dcr_send_cmd &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_send
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_set_mode
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_send_cmd
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_pwr_on
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_pwr_off
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_dcr_form_frame
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_dcr_error_collector
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_flight_task_process
</UL>

<P><STRONG><a name="[2e3]"></a>pn_dcr_send_cmd</STRONG> (Thumb, 208 bytes, Stack size 152 bytes, pn_dcr.o(i.pn_dcr_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = pn_dcr_send_cmd &rArr; printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_unix_time_s
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_uart_send
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_dcr_form_snc_time_frame
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_dcr_form_frame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_run_step_function
</UL>

<P><STRONG><a name="[273]"></a>pn_dcr_set_cfg</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_set_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pn_dcr_set_cfg &rArr; pn_dcr_set_mode &rArr; pn_dcr_pwr_off &rArr; pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_set_mode
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_load_parameters
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_init
</UL>

<P><STRONG><a name="[279]"></a>pn_dcr_set_inh</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pn_dcr.o(i.pn_dcr_set_inh))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_reset_state
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_pl_inhibit_set
</UL>

<P><STRONG><a name="[290]"></a>pn_dcr_set_mode</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pn_dcr_set_mode &rArr; pn_dcr_pwr_off &rArr; pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_pwr_off
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_dcr_error_collector
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_set_cfg
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_reset_state
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_run_step_function
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_flight_task_process
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2de]"></a>pn_dcr_set_status</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, pn_dcr.o(i.pn_dcr_set_status))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_process
</UL>

<P><STRONG><a name="[187]"></a>pn_dcr_uart_err_prcs_cb</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_uart_err_prcs_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pn_dcr_uart_err_prcs_cb &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetError
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_dcr_uart_error_collector
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[2db]"></a>pn_dcr_uart_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pn_dcr_uart_init &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_dcr_uart_error_collector
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_init
</UL>

<P><STRONG><a name="[192]"></a>pn_dcr_uart_rx_prcs_cb</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_uart_rx_prcs_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pn_dcr_uart_rx_prcs_cb &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pn_dcr_uart_error_collector
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[296]"></a>pn_dcr_uart_send</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pn_dcr.o(i.pn_dcr_uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pn_dcr_uart_send &rArr; HAL_UART_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_send_cmd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_run_step_function
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[195]"></a>pn_dcr_uart_tx_prcs_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pn_dcr.o(i.pn_dcr_uart_tx_prcs_cb))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[297]"></a>printf_buff</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, debug.o(i.printf_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = printf_buff &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_last_status
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_last_frame
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20c]"></a>printf_time</STRONG> (Thumb, 138 bytes, Stack size 88 bytes, debug.o(i.printf_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = printf_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_last_status
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_get_last_frame
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_start
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_process
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_load_parameters
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_cyclogram_process
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_stop
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_set_iku_default
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_pwr_on
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_pwr_off
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_check_and_save_tmi
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_stop
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_set_iku_default
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_pwr_on
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_pwr_off
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_check_and_save_tmi
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11_A_B_write_mode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11_A_B_stop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_write_mode
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_stop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_set_iku_default
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_read_req_mode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_read_req_all
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_read_mode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_read_all
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_pwr_on
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_pwr_off
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_interface_reset_and_sync
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_fpga_on
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_fpga_mcu_on
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_check_and_save_tmi
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_write_mode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_stop
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_set_iku_default
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_read_req_mode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_read_req_all
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_read_mode
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_read_all
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_pwr_on
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_pwr_off
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_interface_reset_and_sync
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_fpga_on
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_fpga_mcu_on
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_check_and_save_tmi
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclogram_stop_step_run
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_send_cmd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_run_step_function
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_test
</UL>

<P><STRONG><a name="[e7]"></a>pwr_alert_gd_it_process</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lm.o(i.pwr_alert_gd_it_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pwr_alert_gd_it_process &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[fd]"></a>pwr_cb_it_process</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lm.o(i.pwr_cb_it_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pwr_cb_it_process &rArr; ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_error_process
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_body_read_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
</UL>

<P><STRONG><a name="[2be]"></a>pwr_ch_get_error</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, pwr_ch.o(i.pwr_ch_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pwr_ch_get_error &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_pwr_check
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_pwr_check
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_pwr_check
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_pwr_check
</UL>

<P><STRONG><a name="[2e9]"></a>pwr_ch_init</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, pwr_ch.o(i.pwr_ch_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pwr_ch_init &rArr; ina226_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_parameters_set
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_set_bound
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_init
</UL>

<P><STRONG><a name="[2bf]"></a>pwr_ch_on_off</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, pwr_ch.o(i.pwr_ch_on_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_on_off
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_pwr_on
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_pwr_off
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_pwr_on
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_pwr_off
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_pwr_on
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_pwr_off
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_pwr_on
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_pwr_off
</UL>

<P><STRONG><a name="[2b2]"></a>pwr_ch_set_bound</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwr_ch.o(i.pwr_ch_set_bound))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_dcr_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_init
</UL>

<P><STRONG><a name="[2ea]"></a>pwr_create_report</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, lm.o(i.pwr_create_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pwr_create_report &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___4_lm_c_lm_init____REV16
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_process
</UL>

<P><STRONG><a name="[250]"></a>pwr_get_pwr_switch_key</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lm.o(i.pwr_get_pwr_switch_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pwr_get_pwr_switch_key &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tmi_and_beacon
</UL>

<P><STRONG><a name="[26b]"></a>pwr_init</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, lm.o(i.pwr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pwr_init &rArr; pwr_ch_init &rArr; ina226_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_parameters_set
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_init
</UL>

<P><STRONG><a name="[28f]"></a>pwr_on_off</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lm.o(i.pwr_on_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pwr_on_off &rArr; pwr_ch_on_off &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_ch_on_off
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[287]"></a>pwr_process</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lm.o(i.pwr_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pwr_process &rArr; pwr_create_report &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ina226_start_read_queue
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_create_report
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[230]"></a>release_lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, critical_lock.o(i.release_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = release_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_any_write
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_any_read
</UL>

<P><STRONG><a name="[2a8]"></a>result_emergency_stop</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pl_cyclogram.o(i.result_emergency_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = result_emergency_stop &rArr; result_refresh &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_stop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_stop
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11_A_B_stop
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_stop
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_stop
</UL>

<P><STRONG><a name="[9c]"></a>result_finish</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pl_cyclogram.o(i.result_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = result_finish &rArr; result_refresh &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[83]"></a>result_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pl_cyclogram.o(i.result_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = result_init &rArr; result_refresh &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_refresh
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pl_cyclogram.o(i.cyclogram_init)
</UL>
<P><STRONG><a name="[2ec]"></a>result_refresh</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, pl_cyclogram.o(i.result_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = result_refresh &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_create_header
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_crc16_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_row_data_write
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_finish
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_emergency_stop
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_write_tmi_slice
</UL>

<P><STRONG><a name="[2a6]"></a>result_row_data_write</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, pl_cyclogram.o(i.result_row_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = result_row_data_write &rArr; result_refresh &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_refresh
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_read_all
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_read_all
</UL>

<P><STRONG><a name="[2a1]"></a>result_write_tmi_slice</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, pl_cyclogram.o(i.result_write_tmi_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = result_write_tmi_slice &rArr; result_refresh &rArr; frame_create_header &rArr; clock_get_time_s &rArr; _get_month_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn20_check_and_save_tmi
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn12_check_and_save_tmi
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_check_and_save_tmi
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_check_and_save_tmi
</UL>

<P><STRONG><a name="[21d]"></a>reverse_byte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, crc16.o(i.reverse_byte))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8_rmap_data
</UL>

<P><STRONG><a name="[2ed]"></a>rx_check_frame</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, pn_11_interface_tr_lvl.o(i.rx_check_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rx_check_frame &rArr; rx_data_check &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8_rmap_header
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_get_rx_data_len
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_frame_copy
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_error_set
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_error_check
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_process
</UL>

<P><STRONG><a name="[2f2]"></a>rx_data_check</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, pn_11_interface_tr_lvl.o(i.rx_data_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rx_data_check &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8_rmap_data
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_get_rx_data_len
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_check_frame
</UL>

<P><STRONG><a name="[205]"></a>rx_data_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pn_11_interface_tr_lvl.o(i.rx_data_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_data_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_read_check
</UL>

<P><STRONG><a name="[2f1]"></a>rx_error_check</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pn_11_interface_tr_lvl.o(i.rx_error_check))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_check_frame
</UL>

<P><STRONG><a name="[2f0]"></a>rx_error_set</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, pn_11_interface_tr_lvl.o(i.rx_error_set))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_check_frame
</UL>

<P><STRONG><a name="[2ef]"></a>rx_frame_copy</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, pn_11_interface_tr_lvl.o(i.rx_frame_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_frame_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_get_rx_data_len
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_check_frame
</UL>

<P><STRONG><a name="[2ee]"></a>rx_get_rx_data_len</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, pn_11_interface_tr_lvl.o(i.rx_get_rx_data_len))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_process
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_create_frame
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_frame_copy
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data_check
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_check_frame
</UL>

<P><STRONG><a name="[191]"></a>rx_uart_data</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pn_11_interface_tr_lvl.o(i.rx_uart_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_uart_data &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[22f]"></a>set_lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, critical_lock.o(i.set_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_lock &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_any_write
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_mem_any_read
</UL>

<P><STRONG><a name="[2f5]"></a>tmp1075_body_read_queue</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tmp1075.o(i.tmp1075_body_read_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tmp1075_body_read_queue &rArr; tmp1075_read_request &rArr; HAL_I2C_Master_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_read_request
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_read_data_process
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_cb_it_process
</UL>

<P><STRONG><a name="[2fc]"></a>tmp1075_error_process</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tmp1075.o(i.tmp1075_error_process))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_cb_it_process
</UL>

<P><STRONG><a name="[2c2]"></a>tmp1075_get_error</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, tmp1075.o(i.tmp1075_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tmp1075_get_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_tmp_check
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_tmp_check
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_tmp_check
</UL>

<P><STRONG><a name="[2f8]"></a>tmp1075_init</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, tmp1075.o(i.tmp1075_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tmp1075_init &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_init
</UL>

<P><STRONG><a name="[2f7]"></a>tmp1075_read_data_process</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tmp1075.o(i.tmp1075_read_data_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmp1075_read_data_process
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_tmp1075_c_e917cb1f____REV16
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_body_read_queue
</UL>

<P><STRONG><a name="[2f6]"></a>tmp1075_read_request</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tmp1075.o(i.tmp1075_read_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tmp1075_read_request &rArr; HAL_I2C_Master_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_body_read_queue
</UL>

<P><STRONG><a name="[2fa]"></a>tmp1075_reg_addr_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tmp1075.o(i.tmp1075_reg_addr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tmp1075_reg_addr_set &rArr; HAL_I2C_Master_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_start_read_queue
</UL>

<P><STRONG><a name="[2b3]"></a>tmp1075_set_bound</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tmp1075.o(i.tmp1075_set_bound))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_20_init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_12_init
</UL>

<P><STRONG><a name="[2fb]"></a>tmp1075_start_read_queue</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tmp1075.o(i.tmp1075_start_read_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tmp1075_start_read_queue &rArr; tmp1075_reg_addr_set &rArr; HAL_I2C_Master_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_reg_addr_set
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_process
</UL>

<P><STRONG><a name="[e8]"></a>tmp_alert_it_process</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lm.o(i.tmp_alert_it_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tmp_alert_it_process &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[fe]"></a>tmp_cb_it_process</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lm.o(i.tmp_cb_it_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tmp_cb_it_process &rArr; tmp1075_body_read_queue &rArr; tmp1075_read_request &rArr; HAL_I2C_Master_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_error_process
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_body_read_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
</UL>

<P><STRONG><a name="[2fd]"></a>tmp_create_report</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lm.o(i.tmp_create_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tmp_create_report &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_process
</UL>

<P><STRONG><a name="[26c]"></a>tmp_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lm.o(i.tmp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tmp_init &rArr; tmp1075_init &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_parameters_set
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_init
</UL>

<P><STRONG><a name="[288]"></a>tmp_process</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lm.o(i.tmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tmp_process &rArr; tmp_create_report &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_create_report
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp1075_start_read_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[201]"></a>tr_lvl_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pn_11_interface_tr_lvl.o(i.tr_lvl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tr_lvl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_reset
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_init
</UL>

<P><STRONG><a name="[2b8]"></a>tr_lvl_process</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, pn_11_interface_tr_lvl.o(i.tr_lvl_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = tr_lvl_process &rArr; rx_check_frame &rArr; rx_data_check &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_create_frame
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_get_rx_data_len
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_check_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_interface_process
</UL>

<P><STRONG><a name="[2a2]"></a>tr_lvl_reset</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pn_11_interface_tr_lvl.o(i.tr_lvl_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tr_lvl_reset &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11B_interface_reset_and_sync
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl_pn11A_interface_reset_and_sync
</UL>

<P><STRONG><a name="[208]"></a>tr_lvl_send_data</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pn_11_interface_tr_lvl.o(i.tr_lvl_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = tr_lvl_send_data &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_create_frame
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_write
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lvl_read_req
</UL>

<P><STRONG><a name="[194]"></a>tr_lvl_set_timeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pn_11_interface_tr_lvl.o(i.tr_lvl_set_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[2ba]"></a>tr_lvl_synch</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pn_11_interface_tr_lvl.o(i.tr_lvl_synch))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tr_lvl_synch &rArr; tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_create_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn_11_interface_synch
</UL>

<P><STRONG><a name="[2ff]"></a>tx_create_data_frame</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pn_11_interface_tr_lvl.o(i.tx_create_data_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8_rmap_data
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_create_frame
</UL>

<P><STRONG><a name="[2fe]"></a>tx_create_frame</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, pn_11_interface_tr_lvl.o(i.tx_create_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tx_create_frame &rArr; tx_create_data_frame &rArr; crc8_rmap_data
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8_rmap_header
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_uart_data
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_get_error_type
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_create_data_frame
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_get_rx_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_synch
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_process
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr_lvl_send_data
</UL>

<P><STRONG><a name="[300]"></a>tx_get_error_type</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pn_11_interface_tr_lvl.o(i.tx_get_error_type))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_create_frame
</UL>

<P><STRONG><a name="[301]"></a>tx_uart_data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pn_11_interface_tr_lvl.o(i.tx_uart_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tx_uart_data &rArr; HAL_UART_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_create_frame
</UL>

<P><STRONG><a name="[da]"></a>vcp_uart_CDC_Receive</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, vcp_time_segmentation.o(i.vcp_uart_CDC_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = vcp_uart_CDC_Receive &rArr; USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_is_run
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS
</UL>

<P><STRONG><a name="[d9]"></a>vcp_uart_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, vcp_time_segmentation.o(i.vcp_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = vcp_uart_init &rArr; USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_FS
</UL>

<P><STRONG><a name="[210]"></a>vcp_uart_read</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, vcp_time_segmentation.o(i.vcp_uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vcp_uart_read
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_is_run
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_vcp_read_process
</UL>

<P><STRONG><a name="[20e]"></a>vcp_uart_write</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, vcp_time_segmentation.o(i.vcp_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + In Cycle
<LI>Call Chain = vcp_uart_write &rArr;  vcp_uart_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_uart_write
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_vcp_packet_send
</UL>

<P><STRONG><a name="[213]"></a>xtmtot</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, xtime.o(i.xtmtot))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = xtmtot
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_unix_time_s
</UL>

<P><STRONG><a name="[72]"></a>Flash_InRAM_CopyCodeAndRestart</STRONG> (Thumb, 322 bytes, Stack size 20 bytes, flash.o(sect_FlashProcInRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Flash_InRAM_CopyCodeAndRestart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>Flash_InRAM_EraseSector</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, flash.o(sect_FlashProcInRamPiece))
<BR>[Address Reference Count : 1]<UL><LI> flash.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[df]"></a>Get_SerialNum</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbd_desc.o(i.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_SerialStrDescriptor
</UL>

<P><STRONG><a name="[e0]"></a>IntToUnicode</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, usbd_desc.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[9]"></a>CDC_Control_FS</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, usbd_cdc_if.o(i.CDC_Control_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>CDC_DeInit_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(i.CDC_DeInit_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>CDC_Init_FS</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.CDC_Init_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = CDC_Init_FS &rArr; vcp_uart_init &rArr; USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_uart_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>CDC_Receive_FS</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_cdc_if.o(i.CDC_Receive_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = CDC_Receive_FS &rArr; vcp_uart_CDC_Receive &rArr; USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_uart_CDC_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[133]"></a>PCD_EP_OutSetupPacket_int</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(i.PCD_EP_OutSetupPacket_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = PCD_EP_OutSetupPacket_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>PCD_EP_OutXfrComplete_int</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(i.PCD_EP_OutXfrComplete_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = PCD_EP_OutXfrComplete_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>PCD_WriteEmptyTxFifo</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, stm32f4xx_hal_pcd.o(i.PCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1ee]"></a>USB_CoreReset</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_CoreReset))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[e4]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[e3]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[116]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[117]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[ee]"></a>I2C_ConvertOtherXferOptions</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_ConvertOtherXferOptions))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>I2C_DMAAbort</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_DMAAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = I2C_DMAAbort &rArr; HAL_I2C_ErrorCallback &rArr; pwr_cb_it_process &rArr; ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_i2c.o(i.I2C_ITError)
<LI> stm32f4xx_hal_i2c.o(i.I2C_Slave_STOPF)
</UL>
<P><STRONG><a name="[ec]"></a>I2C_ITError</STRONG> (Thumb, 410 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_ITError))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; pwr_cb_it_process &rArr; ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
</UL>

<P><STRONG><a name="[1a0]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[f5]"></a>I2C_MasterReceive_BTF</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_MasterReceive_BTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = I2C_MasterReceive_BTF &rArr; HAL_I2C_MasterRxCpltCallback &rArr; pwr_cb_it_process &rArr; ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>I2C_MasterReceive_RXNE</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_MasterReceive_RXNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = I2C_MasterReceive_RXNE &rArr; HAL_I2C_MasterRxCpltCallback &rArr; pwr_cb_it_process &rArr; ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>I2C_MasterRequestRead</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_MasterRequestRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[109]"></a>I2C_MasterRequestWrite</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_MasterRequestWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[f3]"></a>I2C_MasterTransmit_BTF</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_MasterTransmit_BTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = I2C_MasterTransmit_BTF &rArr; HAL_I2C_MasterTxCpltCallback &rArr; pwr_cb_it_process &rArr; ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemoryTransmit_TXE_BTF
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>I2C_MasterTransmit_TXE</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_MasterTransmit_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = I2C_MasterTransmit_TXE &rArr; HAL_I2C_MasterTxCpltCallback &rArr; pwr_cb_it_process &rArr; ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemoryTransmit_TXE_BTF
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>I2C_Master_ADD10</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_Master_ADD10))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>I2C_Master_ADDR</STRONG> (Thumb, 616 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_Master_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Master_ADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>I2C_Master_SB</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_Master_SB))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[19b]"></a>I2C_MemoryTransmit_TXE_BTF</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_MemoryTransmit_TXE_BTF))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
</UL>

<P><STRONG><a name="[fb]"></a>I2C_SlaveReceive_BTF</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_SlaveReceive_BTF))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>I2C_SlaveReceive_RXNE</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_SlaveReceive_RXNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SlaveReceive_RXNE
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>I2C_SlaveTransmit_BTF</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_SlaveTransmit_BTF))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>I2C_SlaveTransmit_TXE</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_SlaveTransmit_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SlaveTransmit_TXE
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>I2C_Slave_ADDR</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_Slave_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Slave_ADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AddrCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>I2C_Slave_AF</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_Slave_AF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Slave_AF
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>I2C_Slave_STOPF</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_Slave_STOPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = I2C_Slave_STOPF &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; pwr_cb_it_process &rArr; ina226_body_read_queue &rArr; ina226_read_data_process &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetState
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[105]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>

<P><STRONG><a name="[199]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>

<P><STRONG><a name="[107]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[10a]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[77]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[16f]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[1c1]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[177]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[176]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[178]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[79]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback &rArr; pn_dcr_uart_err_prcs_cb &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[78]"></a>UART_DMARxOnlyAbortCallback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMARxOnlyAbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxOnlyAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_AbortReceive_IT)
</UL>
<P><STRONG><a name="[18a]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[18c]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[189]"></a>UART_Receive_IT</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; pn_dcr_uart_rx_prcs_cb &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[18f]"></a>UART_SetConfig</STRONG> (Thumb, 992 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[18b]"></a>UART_Transmit_IT</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1d0]"></a>USBD_ClrFeature</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1d7]"></a>USBD_GetConfig</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1d8]"></a>USBD_GetDescriptor</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1da]"></a>USBD_GetLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_GetLen))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>

<P><STRONG><a name="[1d9]"></a>USBD_GetStatus</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1e8]"></a>USBD_SetAddress</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1e9]"></a>USBD_SetConfig</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1ec]"></a>USBD_SetFeature</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[f]"></a>USBD_CDC_DataIn</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, usbd_cdc.o(i.USBD_CDC_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_CDC_DataIn &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_CDC_DataOut</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_CDC_DataOut &rArr; USBD_LL_GetRxDataSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBD_CDC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_CDC_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_CDC_EP0_RxReady</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_EP0_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBD_CDC_GetFSCfgDesc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetFSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBD_CDC_GetHSCfgDesc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetHSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBD_CDC_GetOtherSpeedCfgDesc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetOtherSpeedCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBD_CDC_Init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, usbd_cdc.o(i.USBD_CDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_CDC_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBD_CDC_Setup</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, usbd_cdc.o(i.USBD_CDC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USBD_CDC_Setup &rArr; USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[255]"></a>stderr_putchar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget_io.o(i.stderr_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = stderr_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[254]"></a>stdout_putchar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget_io.o(i.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[d2]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, canv.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[1f4]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1f2]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1fa]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1f9]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[82]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[75]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
